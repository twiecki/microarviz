{
  "api/data": [],
  "api/diagnostics": [],
  "api/generated/arviz.ColumnDataSource": [
    {
      "source": "data = {'x': [1,2,3,4], 'y': np.array([10.0, 20.0, 30.0, 40.0])}\n\nsource = ColumnDataSource(data)",
      "names": [],
      "example": {
        "document": "api/generated/arviz.ColumnDataSource",
        "ref_id": "arviz-columndatasource",
        "headings": [
          "arviz.ColumnDataSource"
        ]
      },
      "doc_lineno": 15
    },
    {
      "source": "source = ColumnDataSource(df)",
      "names": [],
      "example": {
        "document": "api/generated/arviz.ColumnDataSource",
        "ref_id": "arviz-columndatasource",
        "headings": [
          "arviz.ColumnDataSource"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "group = df.groupby(('colA', 'ColB'))",
      "names": [],
      "example": {
        "document": "api/generated/arviz.ColumnDataSource",
        "ref_id": "arviz-columndatasource",
        "headings": [
          "arviz.ColumnDataSource"
        ]
      },
      "doc_lineno": 45
    }
  ],
  "api/generated/arviz.Dask": [],
  "api/generated/arviz.InferenceData": [],
  "api/generated/arviz.InferenceData.__init__": [
    {
      "source": "In [1]: import arviz as az\n   ...: import numpy as np\n   ...: import xarray as xr\n   ...: dataset = xr.Dataset(\n   ...:     {\n   ...:         \"a\": ([\"chain\", \"draw\", \"a_dim\"], np.random.normal(size=(4, 100, 3))),\n   ...:         \"b\": ([\"chain\", \"draw\"], np.random.normal(size=(4, 100))),\n   ...:     },\n   ...:     coords={\n   ...:         \"chain\": ([\"chain\"], np.arange(4)),\n   ...:         \"draw\": ([\"draw\"], np.arange(100)),\n   ...:         \"a_dim\": ([\"a_dim\"], [\"x\", \"y\", \"z\"]),\n   ...:     }\n   ...: )\n   ...: idata = az.InferenceData(posterior=dataset, prior=dataset)\n   ...: idata\n   ...: \nOut[1]: \nInference data with groups:\n\t> posterior\n\t> prior",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "InferenceData"
          ],
          "code_str": "az.InferenceData",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "arviz.data.inference_data.InferenceData"
        }
      ],
      "example": {
        "document": "api/generated/arviz.InferenceData.__init__",
        "ref_id": "arviz-inferencedata-init",
        "headings": [
          "arviz.InferenceData.__init__"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata.posterior\nOut[2]: \n<xarray.Dataset>\nDimensions:  (chain: 4, draw: 100, a_dim: 3)\nCoordinates:\n  * chain    (chain) int64 0 1 2 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\n  * a_dim    (a_dim) <U1 'x' 'y' 'z'\nData variables:\n    a        (chain, draw, a_dim) float64 1.709 1.209 0.1026 ... 0.1273 -0.2278\n    b        (chain, draw) float64 -0.1997 -0.8744 -0.06272 ... -1.52 -0.9967",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.__init__",
        "ref_id": "arviz-inferencedata-init",
        "headings": [
          "arviz.InferenceData.__init__"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.add_groups": [],
  "api/generated/arviz.InferenceData.assign": [],
  "api/generated/arviz.InferenceData.assign_coords": [],
  "api/generated/arviz.InferenceData.chunk": [],
  "api/generated/arviz.InferenceData.compute": [],
  "api/generated/arviz.InferenceData.copy": [],
  "api/generated/arviz.InferenceData.cumsum": [],
  "api/generated/arviz.InferenceData.extend": [],
  "api/generated/arviz.InferenceData.from_netcdf": [],
  "api/generated/arviz.InferenceData.from_zarr": [],
  "api/generated/arviz.InferenceData.get": [],
  "api/generated/arviz.InferenceData.get_index": [],
  "api/generated/arviz.InferenceData.groups": [],
  "api/generated/arviz.InferenceData.isel": [
    {
      "source": "In [1]: import arviz as az\n   ...: idata = az.load_arviz_data(\"centered_eight\")\n   ...: del idata.prior  # prior group only has 1 chain currently\n   ...: print(idata.posterior.coords)\n   ...: print(idata.posterior_predictive.coords)\n   ...: print(idata.observed_data.coords)\n   ...: \nCoordinates:\n  * chain    (chain) int64 0 1 2 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * chain    (chain) int64 0 1 2 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.isel",
        "ref_id": "arviz-inferencedata-isel",
        "headings": [
          "arviz.InferenceData.isel"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata_subset = idata.isel(chain=[0, 1, 3])\n   ...: print(idata_subset.posterior.coords)\n   ...: print(idata_subset.posterior_predictive.coords)\n   ...: print(idata_subset.observed_data.coords)\n   ...: \nCoordinates:\n  * chain    (chain) int64 0 1 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * chain    (chain) int64 0 1 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.isel",
        "ref_id": "arviz-inferencedata-isel",
        "headings": [
          "arviz.InferenceData.isel"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.items": [],
  "api/generated/arviz.InferenceData.keys": [],
  "api/generated/arviz.InferenceData.load": [],
  "api/generated/arviz.InferenceData.map": [
    {
      "source": "In [1]: import arviz as az\n   ...: idata = az.load_arviz_data(\"non_centered_eight\")\n   ...: idata_shifted_obs = idata.map(lambda x: x + 3, groups=\"observed_vars\")\n   ...: print(idata_shifted_obs.observed_data)\n   ...: print(idata_shifted_obs.posterior_predictive)\n   ...: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    obs      (school) float64 31.0 11.0 0.0 10.0 2.0 4.0 21.0 15.0\nAttributes:\n    created_at:                 2019-06-21T17:36:37.491073\n    inference_library:          pymc3\n    inference_library_version:  3.7\n<xarray.Dataset>\nDimensions:  (chain: 4, draw: 500, school: 8)\nCoordinates:\n  * chain    (chain) int64 0 1 2 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    obs      (chain, draw, school) float64 12.42 1.107 11.0 ... 5.087 31.48\nAttributes:\n    created_at:                 2019-06-21T17:36:37.487547\n    inference_library:          pymc3\n    inference_library_version:  3.7",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.map",
        "ref_id": "arviz-inferencedata-map",
        "headings": [
          "arviz.InferenceData.map"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata = az.load_arviz_data(\"radon\")\n   ...: idata = idata.map(\n   ...:     lambda ds: ds.rename({\"g_coef\": \"uranium_coefs\"}).assign(\n   ...:         uranium_coefs=[\"intercept\", \"u_slope\"]\n   ...:     ),\n   ...:     groups=[\"posterior\", \"prior\"]\n   ...: )\n   ...: idata.posterior\n   ...: \nOut[2]: \n<xarray.Dataset>\nDimensions:        (chain: 4, draw: 500, uranium_coefs: 2, County: 85)\nCoordinates:\n  * chain          (chain) int64 0 1 2 3\n  * draw           (draw) int64 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * uranium_coefs  (uranium_coefs) <U9 'intercept' 'u_slope'\n  * County         (County) object 'AITKIN' 'ANOKA' ... 'YELLOW MEDICINE'\nData variables:\n    g              (chain, draw, uranium_coefs) float64 1.499 0.5436 ... 0.6087\n    za_county      (chain, draw, County) float64 -0.1139 0.1347 ... 1.025 0.3687\n    b              (chain, draw) float64 -0.5965 -0.5848 ... -0.7949 -0.5402\n    sigma_a        (chain, draw) float64 0.2061 0.1526 0.2201 ... 0.1764 0.1121\n    a              (chain, draw, County) float64 1.125 1.039 ... 1.452 1.723\n    a_county       (chain, draw, County) float64 1.101 1.066 ... 1.567 1.764\n    sigma          (chain, draw) float64 0.7271 0.7161 0.7189 ... 0.7267 0.7324\nAttributes:\n    created_at:                 2020-07-24T18:15:12.191355\n    arviz_version:              0.9.0\n    inference_library:          pymc3\n    inference_library_version:  3.9.2\n    sampling_time:              18.096983432769775\n    tuning_steps:               1000",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.map",
        "ref_id": "arviz-inferencedata-map",
        "headings": [
          "arviz.InferenceData.map"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [3]: idata = az.load_arviz_data(\"rugby\")\n   ...: home_team, away_team = np.array([\n   ...:     m.split() for m in idata.observed_data.match.values\n   ...: ]).T\n   ...: idata = idata.map(\n   ...:     lambda ds, **kwargs: ds.assign_coords(**kwargs),\n   ...:     groups=\"observed_vars\",\n   ...:     home_team=(\"match\", home_team),\n   ...:     away_team=(\"match\", away_team),\n   ...: )\n   ...: print(idata.posterior_predictive)\n   ...: print(idata.observed_data)\n   ...: \n<xarray.Dataset>\nDimensions:      (chain: 4, draw: 500, match: 60)\nCoordinates:\n  * chain        (chain) int64 0 1 2 3\n  * draw         (draw) int64 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * match        (match) object 'Wales Italy' ... 'Ireland England'\n    home_team    (match) <U8 'Wales' 'France' 'Ireland' ... 'France' 'Ireland'\n    away_team    (match) <U8 'Italy' 'England' 'Scotland' ... 'Wales' 'England'\nData variables:\n    home_points  (chain, draw, match) int64 43 9 27 24 12 30 ... 17 23 49 17 27\n    away_points  (chain, draw, match) int64 7 16 9 11 24 11 ... 23 24 9 18 28 12\nAttributes:\n    created_at:                 2019-07-12T20:31:53.563854\n    inference_library:          pymc3\n    inference_library_version:  3.7\n<xarray.Dataset>\nDimensions:      (match: 60)\nCoordinates:\n  * match        (match) object 'Wales Italy' ... 'Ireland England'\n    home_team    (match) <U8 'Wales' 'France' 'Ireland' ... 'France' 'Ireland'\n    away_team    (match) <U8 'Italy' 'England' 'Scotland' ... 'Wales' 'England'\nData variables:\n    home_points  (match) float64 23.0 26.0 28.0 26.0 0.0 ... 61.0 29.0 20.0 13.0\n    away_points  (match) float64 15.0 24.0 6.0 3.0 20.0 ... 21.0 0.0 18.0 9.0\nAttributes:\n    created_at:                 2019-07-12T20:31:53.581293\n    inference_library:          pymc3\n    inference_library_version:  3.7",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.map",
        "ref_id": "arviz-inferencedata-map",
        "headings": [
          "arviz.InferenceData.map"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.max": [],
  "api/generated/arviz.InferenceData.mean": [],
  "api/generated/arviz.InferenceData.median": [],
  "api/generated/arviz.InferenceData.min": [],
  "api/generated/arviz.InferenceData.persist": [],
  "api/generated/arviz.InferenceData.quantile": [],
  "api/generated/arviz.InferenceData.rename": [
    {
      "source": "In [1]: import arviz as az\n   ...: idata = az.load_arviz_data(\"rugby\")\n   ...: idata\n   ...: \nOut[1]: \nInference data with groups:\n\t> posterior\n\t> posterior_predictive\n\t> sample_stats\n\t> prior\n\t> observed_data",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "api/generated/arviz.InferenceData.rename",
        "ref_id": "arviz-inferencedata-rename",
        "headings": [
          "arviz.InferenceData.rename"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata.rename({\"team\": \"team_new\", \"match\":\"match_new\"}, inplace=True)\n   ...: idata\n   ...: \nOut[2]: \nInference data with groups:\n\t> posterior\n\t> posterior_predictive\n\t> sample_stats\n\t> prior\n\t> observed_data",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.rename",
        "ref_id": "arviz-inferencedata-rename",
        "headings": [
          "arviz.InferenceData.rename"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.rename_dims": [
    {
      "source": "In [1]: import arviz as az\n   ...: idata = az.load_arviz_data(\"rugby\")\n   ...: print(list(idata.posterior.dims))\n   ...: print(list(idata.prior.dims))\n   ...: \n['chain', 'draw', 'team']\n['chain', 'draw', 'team', 'match']",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "api/generated/arviz.InferenceData.rename_dims",
        "ref_id": "arviz-inferencedata-rename-dims",
        "headings": [
          "arviz.InferenceData.rename_dims"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata.rename_dims({\"team\": \"team_new\"}, inplace=True)\n   ...: print(list(idata.posterior.dims))\n   ...: print(list(idata.prior.dims))\n   ...: \n['chain', 'draw', 'team_new']\n['chain', 'draw', 'team_new', 'match']",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.rename_dims",
        "ref_id": "arviz-inferencedata-rename-dims",
        "headings": [
          "arviz.InferenceData.rename_dims"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.rename_vars": [
    {
      "source": "In [1]: import arviz as az\n   ...: idata = az.load_arviz_data(\"rugby\")\n   ...: print(list(idata.posterior.data_vars))\n   ...: print(list(idata.prior.data_vars))\n   ...: \n['home', 'intercept', 'atts_star', 'defs_star', 'sd_att', 'sd_def', 'atts', 'defs']\n['sd_att_log__', 'intercept', 'atts_star', 'defs_star', 'away_points', 'sd_att', 'sd_def_log__', 'home', 'atts', 'sd_def', 'home_points', 'defs']",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "api/generated/arviz.InferenceData.rename_vars",
        "ref_id": "arviz-inferencedata-rename-vars",
        "headings": [
          "arviz.InferenceData.rename_vars"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata.rename_vars({\"home\": \"home_new\"}, inplace=True)\n   ...: print(list(idata.posterior.data_vars))\n   ...: print(list(idata.prior.data_vars))\n   ...: \n['home_new', 'intercept', 'atts_star', 'defs_star', 'sd_att', 'sd_def', 'atts', 'defs']\n['sd_att_log__', 'intercept', 'atts_star', 'defs_star', 'away_points', 'sd_att', 'sd_def_log__', 'home_new', 'atts', 'sd_def', 'home_points', 'defs']",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.rename_vars",
        "ref_id": "arviz-inferencedata-rename-vars",
        "headings": [
          "arviz.InferenceData.rename_vars"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.reset_coords": [],
  "api/generated/arviz.InferenceData.reset_index": [],
  "api/generated/arviz.InferenceData.sel": [
    {
      "source": "In [1]: import arviz as az\n   ...: idata = az.load_arviz_data(\"centered_eight\")\n   ...: del idata.prior  # prior group only has 1 chain currently\n   ...: print(idata.posterior.coords)\n   ...: print(idata.posterior_predictive.coords)\n   ...: print(idata.observed_data.coords)\n   ...: \nCoordinates:\n  * chain    (chain) int64 0 1 2 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * chain    (chain) int64 0 1 2 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.sel",
        "ref_id": "arviz-inferencedata-sel",
        "headings": [
          "arviz.InferenceData.sel"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata_subset = idata.sel(chain=[0, 1, 3])\n   ...: print(idata_subset.posterior.coords)\n   ...: print(idata_subset.posterior_predictive.coords)\n   ...: print(idata_subset.observed_data.coords)\n   ...: \nCoordinates:\n  * chain    (chain) int64 0 1 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * chain    (chain) int64 0 1 3\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 ... 492 493 494 495 496 497 498 499\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.sel",
        "ref_id": "arviz-inferencedata-sel",
        "headings": [
          "arviz.InferenceData.sel"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.set_coords": [],
  "api/generated/arviz.InferenceData.set_index": [],
  "api/generated/arviz.InferenceData.sortby": [],
  "api/generated/arviz.InferenceData.stack": [
    {
      "source": "In [1]: import arviz as az\n   ...: idata = az.load_arviz_data(\"rugby\")\n   ...: idata\n   ...: \nOut[1]: \nInference data with groups:\n\t> posterior\n\t> posterior_predictive\n\t> sample_stats\n\t> prior\n\t> observed_data",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "api/generated/arviz.InferenceData.stack",
        "ref_id": "arviz-inferencedata-stack",
        "headings": [
          "arviz.InferenceData.stack"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata.stack(sample=[\"chain\", \"draw\"], inplace=True)\n   ...: idata\n   ...: \nOut[2]: \nInference data with groups:\n\t> posterior\n\t> posterior_predictive\n\t> sample_stats\n\t> prior\n\t> observed_data",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.stack",
        "ref_id": "arviz-inferencedata-stack",
        "headings": [
          "arviz.InferenceData.stack"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [3]: import arviz as az\n   ...: datadict = {\n   ...:     \"a\": np.random.randn(100),\n   ...:     \"b\": np.random.randn(1, 100, 10),\n   ...:     \"c\": np.random.randn(1, 100, 3, 4),\n   ...: }\n   ...: coords = {\n   ...:     \"c1\": np.arange(3),\n   ...:     \"c99\": np.arange(4),\n   ...:     \"b1\": np.arange(10),\n   ...: }\n   ...: dims = {\"c\": [\"c1\", \"c99\"], \"b\": [\"b1\"]}\n   ...: idata = az.from_dict(\n   ...:     posterior=datadict, posterior_predictive=datadict, coords=coords, dims=dims\n   ...: )\n   ...: idata.posterior\n   ...: \nOut[3]: \n<xarray.Dataset>\nDimensions:  (chain: 1, draw: 100, b1: 10, c1: 3, c99: 4)\nCoordinates:\n  * chain    (chain) int64 0\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\n  * b1       (b1) int64 0 1 2 3 4 5 6 7 8 9\n  * c1       (c1) int64 0 1 2\n  * c99      (c99) int64 0 1 2 3\nData variables:\n    a        (chain, draw) float64 -2.627 -0.3274 -0.2692 ... 0.3923 -1.286\n    b        (chain, draw, b1) float64 -0.6053 1.222 1.154 ... 0.3802 0.5433\n    c        (chain, draw, c1, c99) float64 1.512 0.1742 ... -0.8768 1.585\nAttributes:\n    created_at:     2022-05-12T23:22:31.047940\n    arviz_version:  0.13.0.dev0",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "api/generated/arviz.InferenceData.stack",
        "ref_id": "arviz-inferencedata-stack",
        "headings": [
          "arviz.InferenceData.stack"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [4]: idata.stack(z=[\"c1\", \"c99\"], inplace=True)\n   ...: idata.posterior\n   ...: \nOut[4]: \n<xarray.Dataset>\nDimensions:  (chain: 1, draw: 100, b1: 10, z: 12)\nCoordinates:\n  * chain    (chain) int64 0\n  * draw     (draw) int64 0 1 2 3 4 5 6 7 8 9 ... 90 91 92 93 94 95 96 97 98 99\n  * b1       (b1) int64 0 1 2 3 4 5 6 7 8 9\n  * z        (z) MultiIndex\n  - c1       (z) int64 0 0 0 0 1 1 1 1 2 2 2 2\n  - c99      (z) int64 0 1 2 3 0 1 2 3 0 1 2 3\nData variables:\n    a        (chain, draw) float64 -2.627 -0.3274 -0.2692 ... 0.3923 -1.286\n    b        (chain, draw, b1) float64 -0.6053 1.222 1.154 ... 0.3802 0.5433\n    c        (chain, draw, z) float64 1.512 0.1742 -1.215 ... -0.8768 1.585\nAttributes:\n    created_at:     2022-05-12T23:22:31.047940\n    arviz_version:  0.13.0.dev0",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.stack",
        "ref_id": "arviz-inferencedata-stack",
        "headings": [
          "arviz.InferenceData.stack"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.sum": [],
  "api/generated/arviz.InferenceData.to_dataframe": [],
  "api/generated/arviz.InferenceData.to_dict": [],
  "api/generated/arviz.InferenceData.to_json": [],
  "api/generated/arviz.InferenceData.to_netcdf": [],
  "api/generated/arviz.InferenceData.to_zarr": [],
  "api/generated/arviz.InferenceData.unify_chunks": [],
  "api/generated/arviz.InferenceData.unstack": [
    {
      "source": "In [1]: import arviz as az\n   ...: datadict = {\n   ...:     \"a\": np.random.randn(100),\n   ...:     \"b\": np.random.randn(1, 100, 10),\n   ...:     \"c\": np.random.randn(1, 100, 3, 4),\n   ...: }\n   ...: coords = {\n   ...:     \"c1\": np.arange(3),\n   ...:     \"c99\": np.arange(4),\n   ...:     \"b1\": np.arange(10),\n   ...: }\n   ...: dims = {\"c\": [\"c1\", \"c99\"], \"b\": [\"b1\"]}\n   ...: idata = az.from_dict(\n   ...:     posterior=datadict, posterior_predictive=datadict, coords=coords, dims=dims\n   ...: )\n   ...: idata.stack(z=[\"c1\", \"c99\"], inplace=True)\n   ...: idata\n   ...: \nOut[1]: \nInference data with groups:\n\t> posterior\n\t> posterior_predictive",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "api/generated/arviz.InferenceData.unstack",
        "ref_id": "arviz-inferencedata-unstack",
        "headings": [
          "arviz.InferenceData.unstack"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: idata.unstack(inplace=True)\n   ...: idata\n   ...: \nOut[2]: \nInference data with groups:\n\t> posterior\n\t> posterior_predictive",
      "names": [],
      "example": {
        "document": "api/generated/arviz.InferenceData.unstack",
        "ref_id": "arviz-inferencedata-unstack",
        "headings": [
          "arviz.InferenceData.unstack"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.InferenceData.values": [],
  "api/generated/arviz.Numba": [],
  "api/generated/arviz.PyStan2SamplingWrapper": [],
  "api/generated/arviz.PyStan2SamplingWrapper.__init__": [],
  "api/generated/arviz.PyStan2SamplingWrapper.check_implemented_methods": [],
  "api/generated/arviz.PyStan2SamplingWrapper.get_inference_data": [],
  "api/generated/arviz.PyStan2SamplingWrapper.log_likelihood__i": [],
  "api/generated/arviz.PyStan2SamplingWrapper.sample": [],
  "api/generated/arviz.PyStan2SamplingWrapper.sel_observations": [],
  "api/generated/arviz.PyStanSamplingWrapper": [],
  "api/generated/arviz.PyStanSamplingWrapper.__init__": [],
  "api/generated/arviz.PyStanSamplingWrapper.check_implemented_methods": [],
  "api/generated/arviz.PyStanSamplingWrapper.get_inference_data": [],
  "api/generated/arviz.PyStanSamplingWrapper.log_likelihood__i": [],
  "api/generated/arviz.PyStanSamplingWrapper.sample": [],
  "api/generated/arviz.PyStanSamplingWrapper.sel_observations": [],
  "api/generated/arviz.SamplingWrapper": [],
  "api/generated/arviz.SamplingWrapper.__init__": [],
  "api/generated/arviz.SamplingWrapper.check_implemented_methods": [],
  "api/generated/arviz.SamplingWrapper.get_inference_data": [],
  "api/generated/arviz.SamplingWrapper.log_likelihood__i": [],
  "api/generated/arviz.SamplingWrapper.sample": [],
  "api/generated/arviz.SamplingWrapper.sel_observations": [],
  "api/generated/arviz.apply_test_function": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"centered_eight\")\n>>> az.apply_test_function(idata, lambda y, theta: np.min(y))\n>>> T = np.asscalar(idata.observed_data.T)\n>>> az.plot_posterior(idata, var_names=[\"T\"], group=\"posterior_predictive\", ref_val=T)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "apply_test_function"
          ],
          "code_str": "az.apply_test_function",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.apply_test_function"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.apply_test_function",
        "ref_id": "arviz-apply-test-function",
        "headings": [
          "arviz.apply_test_function"
        ]
      },
      "doc_lineno": 7
    }
  ],
  "api/generated/arviz.autocorr": [],
  "api/generated/arviz.autocov": [],
  "api/generated/arviz.bfmi": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data('radon')\n   ...: az.bfmi(data)\n   ...: \nOut[1]: array([0.729448  , 0.67720456, 0.65528958, 0.71930902])",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "bfmi"
          ],
          "code_str": "az.bfmi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.bfmi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.bfmi",
        "ref_id": "arviz-bfmi",
        "headings": [
          "arviz.bfmi"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.compare": [
    {
      "source": "In [1]: import arviz as az\n   ...: data1 = az.load_arviz_data(\"non_centered_eight\")\n   ...: data2 = az.load_arviz_data(\"centered_eight\")\n   ...: compare_dict = {\"non centered\": data1, \"centered\": data2}\n   ...: az.compare(compare_dict)\n   ...: \nOut[1]: \n              rank        loo     p_loo  ...       dse  warning  loo_scale\nnon centered     0 -30.687967  0.842565  ...  0.000000    False        log\ncentered         1 -30.810558  0.954237  ...  0.086162    False        log\n\n[2 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "compare"
          ],
          "code_str": "az.compare",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.compare"
        }
      ],
      "example": {
        "document": "api/generated/arviz.compare",
        "ref_id": "arviz-compare",
        "headings": [
          "arviz.compare"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: az.compare(compare_dict, ic=\"loo\", method=\"stacking\", scale=\"log\")\nOut[2]: \n              rank        loo     p_loo  ...       dse  warning  loo_scale\nnon centered     0 -30.687967  0.842565  ...  0.000000    False        log\ncentered         1 -30.810558  0.954237  ...  0.086162    False        log\n\n[2 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "compare"
          ],
          "code_str": "az.compare",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.compare"
        }
      ],
      "example": {
        "document": "api/generated/arviz.compare",
        "ref_id": "arviz-compare",
        "headings": [
          "arviz.compare"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.concat": [
    {
      "source": "In [1]: import arviz as az\n   ...: import numpy as np\n   ...: data = {\n   ...:     \"a\": np.random.normal(size=(4, 100, 3)),\n   ...:     \"b\": np.random.normal(size=(4, 100)),\n   ...: }\n   ...: coords = {\"a_dim\": [\"x\", \"y\", \"z\"]}\n   ...: dataA = az.from_dict(data, coords=coords, dims={\"a\": [\"a_dim\"]})\n   ...: dataA\n   ...: \nOut[1]: \nInference data with groups:\n\t> posterior",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "api/generated/arviz.concat",
        "ref_id": "arviz-concat",
        "headings": [
          "arviz.concat"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: dataB = az.from_dict(prior=data, coords=coords, dims={\"a\": [\"a_dim\"]})\n   ...: dataB\n   ...: \nOut[2]: \nInference data with groups:\n\t> prior",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "api/generated/arviz.concat",
        "ref_id": "arviz-concat",
        "headings": [
          "arviz.concat"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [3]: az.concat(dataA, dataB)\nOut[3]: \nInference data with groups:\n\t> posterior\n\t> prior",
      "names": [
        {
          "import_components": [
            "arviz",
            "concat"
          ],
          "code_str": "az.concat",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.concat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.concat",
        "ref_id": "arviz-concat",
        "headings": [
          "arviz.concat"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [4]: az.concat(dataA, dataA, dim=\"chain\")\nOut[4]: \nInference data with groups:\n\t> posterior",
      "names": [
        {
          "import_components": [
            "arviz",
            "concat"
          ],
          "code_str": "az.concat",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.concat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.concat",
        "ref_id": "arviz-concat",
        "headings": [
          "arviz.concat"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.convert_to_dataset": [],
  "api/generated/arviz.convert_to_inference_data": [],
  "api/generated/arviz.create_layout": [],
  "api/generated/arviz.dict_to_dataset": [],
  "api/generated/arviz.ess": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data('non_centered_eight')\n   ...: az.ess(data)\n   ...: \nOut[1]: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    mu       float64 2.354e+03\n    theta_t  (school) float64 2.215e+03 3.159e+03 ... 2.678e+03 2.522e+03\n    tau      float64 1.268e+03\n    theta    (school) float64 2.298e+03 2.434e+03 ... 2.174e+03 2.278e+03",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "ess"
          ],
          "code_str": "az.ess",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.ess",
        "ref_id": "arviz-ess",
        "headings": [
          "arviz.ess"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: az.ess(data, relative=True, var_names=[\"mu\", \"theta_t\"])\nOut[2]: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    mu       float64 1.177\n    theta_t  (school) float64 1.107 1.579 1.463 1.258 1.156 1.277 1.339 1.261",
      "names": [
        {
          "import_components": [
            "arviz",
            "ess"
          ],
          "code_str": "az.ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.ess",
        "ref_id": "arviz-ess",
        "headings": [
          "arviz.ess"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [3]: az.ess(data, method=\"tail\")\nOut[3]: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    mu       float64 1.401e+03\n    theta_t  (school) float64 1.45e+03 1.514e+03 ... 1.207e+03 1.589e+03\n    tau      float64 900.0\n    theta    (school) float64 1.445e+03 1.506e+03 ... 1.433e+03 1.418e+03",
      "names": [
        {
          "import_components": [
            "arviz",
            "ess"
          ],
          "code_str": "az.ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.ess",
        "ref_id": "arviz-ess",
        "headings": [
          "arviz.ess"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.extract_dataset": [],
  "api/generated/arviz.from_cmdstan": [],
  "api/generated/arviz.from_cmdstanpy": [],
  "api/generated/arviz.from_dict": [],
  "api/generated/arviz.from_emcee": [],
  "api/generated/arviz.from_json": [],
  "api/generated/arviz.from_netcdf": [],
  "api/generated/arviz.from_numpyro": [],
  "api/generated/arviz.from_pyjags": [],
  "api/generated/arviz.from_pymc3": [],
  "api/generated/arviz.from_pymc3_predictions": [],
  "api/generated/arviz.from_pyro": [],
  "api/generated/arviz.from_pystan": [],
  "api/generated/arviz.hdi": [
    {
      "source": "In [1]: import arviz as az\n   ...: import numpy as np\n   ...: data = np.random.normal(size=2000)\n   ...: az.hdi(data, hdi_prob=.68)\n   ...: \nOut[1]: array([-0.90431468,  1.12055799])",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "hdi"
          ],
          "code_str": "az.hdi",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.hdi",
        "ref_id": "arviz-hdi",
        "headings": [
          "arviz.hdi"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: import arviz as az\n   ...: data = az.load_arviz_data('centered_eight')\n   ...: az.hdi(data)\n   ...: \nOut[2]: \n<xarray.Dataset>\nDimensions:  (hdi: 2, school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\n  * hdi      (hdi) <U6 'lower' 'higher'\nData variables:\n    mu       (hdi) float64 -2.118 10.4\n    theta    (school, hdi) float64 -3.707 17.34 -4.039 ... 16.92 -5.665 15.27\n    tau      (hdi) float64 0.5692 9.386",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "hdi"
          ],
          "code_str": "az.hdi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.hdi",
        "ref_id": "arviz-hdi",
        "headings": [
          "arviz.hdi"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [3]: az.hdi(data, var_names=[\"mu\", \"theta\"])\nOut[3]: \n<xarray.Dataset>\nDimensions:  (hdi: 2, school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\n  * hdi      (hdi) <U6 'lower' 'higher'\nData variables:\n    mu       (hdi) float64 -2.118 10.4\n    theta    (school, hdi) float64 -3.707 17.34 -4.039 ... 16.92 -5.665 15.27",
      "names": [
        {
          "import_components": [
            "arviz",
            "hdi"
          ],
          "code_str": "az.hdi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.hdi",
        "ref_id": "arviz-hdi",
        "headings": [
          "arviz.hdi"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [4]: az.hdi(data, var_names=\"theta\", input_core_dims = [[\"chain\",\"draw\", \"school\"]])\nOut[4]: \n<xarray.Dataset>\nDimensions:  (hdi: 2)\nCoordinates:\n  * hdi      (hdi) <U6 'lower' 'higher'\nData variables:\n    theta    (hdi) float64 -5.667 14.69",
      "names": [
        {
          "import_components": [
            "arviz",
            "hdi"
          ],
          "code_str": "az.hdi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.hdi",
        "ref_id": "arviz-hdi",
        "headings": [
          "arviz.hdi"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [5]: az.hdi(data, coords={\"chain\":[0, 1, 3]}, input_core_dims = [[\"draw\"]])\nOut[5]: \n<xarray.Dataset>\nDimensions:  (chain: 3, hdi: 2, school: 8)\nCoordinates:\n  * chain    (chain) int64 0 1 3\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\n  * hdi      (hdi) <U6 'lower' 'higher'\nData variables:\n    mu       (chain, hdi) float64 -1.996 9.312 -2.358 10.91 -0.7842 9.985\n    theta    (chain, school, hdi) float64 -4.077 17.44 -3.104 ... -3.708 14.21\n    tau      (chain, hdi) float64 0.6768 8.881 1.013 9.1 0.5001 8.994",
      "names": [
        {
          "import_components": [
            "arviz",
            "hdi"
          ],
          "code_str": "az.hdi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.hdi",
        "ref_id": "arviz-hdi",
        "headings": [
          "arviz.hdi"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.interactive_backend": [],
  "api/generated/arviz.kde": [
    {
      "source": ">>> import numpy as np\n>>> import matplotlib.pyplot as plt\n>>> from arviz import kde\n>>>\n>>> rvs = np.random.gamma(shape=1.8, size=1000)\n>>> grid, pdf = kde(rvs)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "gamma"
          ],
          "code_str": "np.random.gamma",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.gamma"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 10
    },
    {
      "source": ">>> grid, pdf = kde(rvs, bw=\"silverman\")\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> # bw_fct > 1 means more smoothness.\n>>> grid, pdf = kde(rvs, bw_fct=2.5)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> grid, pdf = kde(rvs, bound_correction=False, extend=True, extend_fct=0.5)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> # It accepts tuples and lists of length 2.\n>>> grid, pdf = kde(rvs, bound_correction=False, custom_lims=(0, 10))\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> rvs = np.random.vonmises(mu=np.pi, kappa=1, size=500)\n>>> grid, pdf = kde(rvs, circular=True)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "vonmises"
          ],
          "code_str": "np.random.vonmises",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.vonmises"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> rvs = np.random.vonmises(mu=np.pi, kappa=1, size=500)\n>>> # bw_fct > 1 means less smoothness.\n>>> grid, pdf = kde(rvs, circular=True, bw_fct=3)\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "pi"
          ],
          "code_str": "np.pi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.pi"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "vonmises"
          ],
          "code_str": "np.random.vonmises",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.vonmises"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 7
    },
    {
      "source": ">>> # This is still experimental, does not always work.\n>>> rvs = np.random.vonmises(mu=0, kappa=30, size=500)\n>>> grid, pdf = kde(rvs, circular=True, custom_lims=(-1, 1))\n>>> plt.plot(grid, pdf)\n>>> plt.show()",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "vonmises"
          ],
          "code_str": "np.random.vonmises",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.vonmises"
        },
        {
          "import_components": [
            "arviz",
            "kde"
          ],
          "code_str": "kde",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.kde"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "show"
          ],
          "code_str": "plt.show",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.show"
        }
      ],
      "example": {
        "document": "api/generated/arviz.kde",
        "ref_id": "arviz-kde",
        "headings": [
          "arviz.kde"
        ]
      },
      "doc_lineno": 7
    }
  ],
  "api/generated/arviz.labels.BaseLabeller": [],
  "api/generated/arviz.labels.BaseLabeller.__init__": [],
  "api/generated/arviz.labels.BaseLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.make_label_flat": [],
  "api/generated/arviz.labels.BaseLabeller.make_label_vert": [],
  "api/generated/arviz.labels.BaseLabeller.make_model_label": [],
  "api/generated/arviz.labels.BaseLabeller.make_pp_label": [],
  "api/generated/arviz.labels.BaseLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.sel_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.BaseLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller": [],
  "api/generated/arviz.labels.DimCoordLabeller.__init__": [],
  "api/generated/arviz.labels.DimCoordLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_label_flat": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_label_vert": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_model_label": [],
  "api/generated/arviz.labels.DimCoordLabeller.make_pp_label": [],
  "api/generated/arviz.labels.DimCoordLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.sel_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.DimCoordLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller": [],
  "api/generated/arviz.labels.DimIdxLabeller.__init__": [],
  "api/generated/arviz.labels.DimIdxLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_label_flat": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_label_vert": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_model_label": [],
  "api/generated/arviz.labels.DimIdxLabeller.make_pp_label": [],
  "api/generated/arviz.labels.DimIdxLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.sel_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.DimIdxLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.IdxLabeller": [],
  "api/generated/arviz.labels.IdxLabeller.__init__": [],
  "api/generated/arviz.labels.IdxLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.make_label_flat": [],
  "api/generated/arviz.labels.IdxLabeller.make_label_vert": [],
  "api/generated/arviz.labels.IdxLabeller.make_model_label": [],
  "api/generated/arviz.labels.IdxLabeller.make_pp_label": [],
  "api/generated/arviz.labels.IdxLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.sel_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.IdxLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.MapLabeller": [],
  "api/generated/arviz.labels.MapLabeller.__init__": [],
  "api/generated/arviz.labels.MapLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.MapLabeller.make_label_flat": [],
  "api/generated/arviz.labels.MapLabeller.make_label_vert": [],
  "api/generated/arviz.labels.MapLabeller.make_model_label": [],
  "api/generated/arviz.labels.MapLabeller.make_pp_label": [],
  "api/generated/arviz.labels.MapLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.MapLabeller.sel_to_str": [],
  "api/generated/arviz.labels.MapLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.MapLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller": [],
  "api/generated/arviz.labels.NoModelLabeller.__init__": [],
  "api/generated/arviz.labels.NoModelLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.make_label_flat": [],
  "api/generated/arviz.labels.NoModelLabeller.make_label_vert": [],
  "api/generated/arviz.labels.NoModelLabeller.make_model_label": [],
  "api/generated/arviz.labels.NoModelLabeller.make_pp_label": [],
  "api/generated/arviz.labels.NoModelLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.sel_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.NoModelLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller": [],
  "api/generated/arviz.labels.NoVarLabeller.__init__": [],
  "api/generated/arviz.labels.NoVarLabeller.dim_coord_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.make_label_flat": [],
  "api/generated/arviz.labels.NoVarLabeller.make_label_vert": [],
  "api/generated/arviz.labels.NoVarLabeller.make_model_label": [],
  "api/generated/arviz.labels.NoVarLabeller.make_pp_label": [],
  "api/generated/arviz.labels.NoVarLabeller.model_name_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.sel_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.var_name_to_str": [],
  "api/generated/arviz.labels.NoVarLabeller.var_pp_to_str": [],
  "api/generated/arviz.labels.mix_labellers": [
    {
      "source": "In [1]: from arviz.labels import mix_labellers, DimCoordLabeller, MapLabeller\n   ...: l1 = DimCoordLabeller()\n   ...: sel = {\"dim1\": \"a\", \"dim2\": \"top\"}\n   ...: print(f\"Output of DimCoordLabeller alone > {l1.sel_to_str(sel, sel)}\")\n   ...: l2 = MapLabeller(dim_map={\"dim1\": \"$d_1$\", \"dim2\": r\"$d_2$\"})\n   ...: print(f\"Output of MapLabeller alone > {l2.sel_to_str(sel, sel)}\")\n   ...: l3 = mix_labellers(\n   ...:     (MapLabeller, DimCoordLabeller)\n   ...: )(dim_map={\"dim1\": \"$d_1$\", \"dim2\": r\"$d_2$\"})\n   ...: print(f\"Output of mixture labeller > {l3.sel_to_str(sel, sel)}\")\n   ...: \nOutput of DimCoordLabeller alone > dim1: a, dim2: top\nOutput of MapLabeller alone > a, top\nOutput of mixture labeller > $d_1$: a, $d_2$: top",
      "names": [],
      "example": {
        "document": "api/generated/arviz.labels.mix_labellers",
        "ref_id": "arviz-labels-mix-labellers",
        "headings": [
          "arviz.labels.mix_labellers"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: l4 = mix_labellers(\n   ...:     (DimCoordLabeller, MapLabeller)\n   ...: )(dim_map={\"dim1\": \"$d_1$\", \"dim2\": r\"$d_2$\"})\n   ...: \n\nIn [3]: print(f\"Output of inverted mixture labeller > {l4.sel_to_str(sel, sel)}\")\nOutput of inverted mixture labeller > dim1: a, dim2: top",
      "names": [],
      "example": {
        "document": "api/generated/arviz.labels.mix_labellers",
        "ref_id": "arviz-labels-mix-labellers",
        "headings": [
          "arviz.labels.mix_labellers"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.list_datasets": [],
  "api/generated/arviz.load_arviz_data": [],
  "api/generated/arviz.loo": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data(\"centered_eight\")\n   ...: az.loo(data)\n   ...: \nOut[1]: \nComputed from 2000 posterior samples and 8 observations log-likelihood matrix.\n\n         Estimate       SE\nelpd_loo   -30.81     1.43\np_loo        0.95        -\n------\n\nPareto k diagnostic values:\n                         Count   Pct.\n(-Inf, 0.5]   (good)        6   75.0%\n (0.5, 0.7]   (ok)          2   25.0%\n   (0.7, 1]   (bad)         0    0.0%\n   (1, Inf)   (very bad)    0    0.0%",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "api/generated/arviz.loo",
        "ref_id": "arviz-loo",
        "headings": [
          "arviz.loo"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: data_loo = az.loo(data, pointwise=True)\n   ...: data_loo.loo_i\n   ...: \nOut[2]: \n<xarray.DataArray 'loo_i' (school: 8)>\narray([-4.91696767, -3.41751961, -3.85571898, -3.46734224, -3.40488294,\n       -3.47796516, -4.31633415, -3.95382766])\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "api/generated/arviz.loo",
        "ref_id": "arviz-loo",
        "headings": [
          "arviz.loo"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.loo_pit": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data(\"centered_eight\")\n   ...: az.loo_pit(idata=data, y=\"obs\")\n   ...: \nOut[1]: \narray([0.93709089, 0.64299662, 0.35337357, 0.60399173, 0.30613239,\n       0.38855003, 0.91081225, 0.65456656])",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "loo_pit"
          ],
          "code_str": "az.loo_pit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.loo_pit"
        }
      ],
      "example": {
        "document": "api/generated/arviz.loo_pit",
        "ref_id": "arviz-loo-pit",
        "headings": [
          "arviz.loo_pit"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: T = data.observed_data.obs - data.posterior.mu.median(dim=(\"chain\", \"draw\"))\n   ...: T_hat = data.posterior_predictive.obs - data.posterior.mu\n   ...: T_hat = T_hat.stack(__sample__=(\"chain\", \"draw\"))\n   ...: az.loo_pit(idata=data, y=T**2, y_hat=T_hat**2)\n   ...: \nOut[2]: \n<xarray.DataArray (school: 8)>\narray([0.87402093, 0.30510478, 0.29976597, 0.21659434, 0.37189578,\n       0.20309587, 0.82479374, 0.33979512])\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo_pit"
          ],
          "code_str": "az.loo_pit",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.loo_pit"
        }
      ],
      "example": {
        "document": "api/generated/arviz.loo_pit",
        "ref_id": "arviz-loo-pit",
        "headings": [
          "arviz.loo_pit"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.make_ufunc": [],
  "api/generated/arviz.mcse": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data(\"non_centered_eight\")\n   ...: az.mcse(data)\n   ...: \nOut[1]: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    mu       float64 0.06787\n    theta_t  (school) float64 0.02117 0.01655 0.01758 ... 0.01886 0.0185 0.01861\n    tau      float64 0.0739\n    theta    (school) float64 0.1196 0.09312 0.1104 ... 0.09868 0.1054 0.1068",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "mcse"
          ],
          "code_str": "az.mcse",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.mcse"
        }
      ],
      "example": {
        "document": "api/generated/arviz.mcse",
        "ref_id": "arviz-mcse",
        "headings": [
          "arviz.mcse"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: az.mcse(data, method=\"quantile\", prob=0.7)\nOut[2]: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    mu       float64 0.0966\n    theta_t  (school) float64 0.02069 0.03194 0.02927 ... 0.02107 0.03014\n    tau      float64 0.08686\n    theta    (school) float64 0.1886 0.1385 0.1313 ... 0.1247 0.1144 0.1243",
      "names": [
        {
          "import_components": [
            "arviz",
            "mcse"
          ],
          "code_str": "az.mcse",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.mcse"
        }
      ],
      "example": {
        "document": "api/generated/arviz.mcse",
        "ref_id": "arviz-mcse",
        "headings": [
          "arviz.mcse"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.output_file": [],
  "api/generated/arviz.output_notebook": [],
  "api/generated/arviz.plot_autocorr": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_autocorr(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_autocorr(data, var_names=['mu', 'tau'] )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_autocorr(data, var_names=['~thet'], filter_vars=\"like\", combined=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_autocorr(data, var_names=['mu', 'tau'], max_lag=200, combined=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_autocorr",
        "ref_id": "arviz-plot-autocorr",
        "headings": [
          "arviz.plot_autocorr"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_bpv": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data(\"regression1d\")\n>>> az.plot_bpv(data, kind=\"p_value\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_bpv"
          ],
          "code_str": "az.plot_bpv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_bpv"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_bpv",
        "ref_id": "arviz-plot-bpv",
        "headings": [
          "arviz.plot_bpv"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data(\"regression1d\")\n>>> az.plot_bpv(data, kind=\"t_stat\", t_stat=lambda x:np.percentile(x, q=50, axis=-1))",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_bpv"
          ],
          "code_str": "az.plot_bpv",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_bpv"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_bpv",
        "ref_id": "arviz-plot-bpv",
        "headings": [
          "arviz.plot_bpv"
        ]
      },
      "doc_lineno": 5
    }
  ],
  "api/generated/arviz.plot_compare": [
    {
      "source": ">>> import arviz as az\n>>> model_compare = az.compare({'Centered 8 schools': az.load_arviz_data('centered_eight'),\n>>>                  'Non-centered 8 schools': az.load_arviz_data('non_centered_eight')})\n>>> az.plot_compare(model_compare)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "compare"
          ],
          "code_str": "az.compare",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.compare"
        },
        {
          "import_components": [
            "arviz",
            "plot_compare"
          ],
          "code_str": "az.plot_compare",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_compare"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_compare",
        "ref_id": "arviz-plot-compare",
        "headings": [
          "arviz.plot_compare"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> az.plot_compare(model_compare, insample_dev=False)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_compare"
          ],
          "code_str": "az.plot_compare",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_compare"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_compare",
        "ref_id": "arviz-plot-compare",
        "headings": [
          "arviz.plot_compare"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_density": [
    {
      "source": ">>> import arviz as az\n>>> centered = az.load_arviz_data('centered_eight')\n>>> non_centered = az.load_arviz_data('non_centered_eight')\n>>> az.plot_density([centered, non_centered])",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], grid=(4, 5))",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], group=\"prior\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], hdi_prob=.5)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], outline=False, shade=.8)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_density([centered, non_centered], var_names=[\"mu\"], bw=.9)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_density",
        "ref_id": "arviz-plot-density",
        "headings": [
          "arviz.plot_density"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_dist": [
    {
      "source": ">>> import numpy as np\n>>> import arviz as az\n>>> a = np.random.poisson(4, 1000)\n>>> az.plot_dist(a)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "poisson"
          ],
          "code_str": "np.random.poisson",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.poisson"
        },
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> b = np.random.normal(0, 1, 1000)\n>>> az.plot_dist(b)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      },
      "doc_lineno": 4
    },
    {
      "source": ">>> az.plot_dist(b, rug=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_dist(b, rug=True, quantiles=[.25, .5, .75])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_dist(b, rug=True, quantiles=[.25, .5, .75], cumulative=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dist"
          ],
          "code_str": "az.plot_dist",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dist"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist",
        "ref_id": "arviz-plot-dist",
        "headings": [
          "arviz.plot_dist"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_dist_comparison": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('rugby')\n>>> az.plot_dist_comparison(data, var_names=[\"defs\"], coords={\"team\" : [\"Italy\"]})",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_dist_comparison"
          ],
          "code_str": "az.plot_dist_comparison",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_dist_comparison"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dist_comparison",
        "ref_id": "arviz-plot-dist-comparison",
        "headings": [
          "arviz.plot_dist_comparison"
        ]
      },
      "doc_lineno": 5
    }
  ],
  "api/generated/arviz.plot_dot": [
    {
      "source": ">>> import arviz as az\n>>> import numpy as np\n>>> values = np.random.normal(0, 1, 500)\n>>> az.plot_dot(values)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> az.plot_dot(values, nquantiles=100)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_dot(values, point_interval=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_dot(values, point_interval=True, rotated=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_dot"
          ],
          "code_str": "az.plot_dot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_dot"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_dot",
        "ref_id": "arviz-plot-dot",
        "headings": [
          "arviz.plot_dot"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_elpd": [
    {
      "source": ">>> import arviz as az\n>>> idata1 = az.load_arviz_data(\"centered_eight\")\n>>> idata2 = az.load_arviz_data(\"non_centered_eight\")\n>>> az.plot_elpd(\n>>>     {\"centered model\": idata1, \"non centered model\": idata2},\n>>>     xlabels=True\n>>> )",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_elpd"
          ],
          "code_str": "az.plot_elpd",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_elpd"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_elpd",
        "ref_id": "arviz-plot-elpd",
        "headings": [
          "arviz.plot_elpd"
        ]
      },
      "doc_lineno": 9
    },
    {
      "source": "import arviz as az\nidata1 = az.load_arviz_data(\"centered_eight\")\nidata2 = az.load_arviz_data(\"non_centered_eight\")\naz.plot_elpd(\n    {\"centered model\": idata1, \"non centered model\": idata2},\n    backend=\"bokeh\"\n)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_elpd"
          ],
          "code_str": "az.plot_elpd",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_elpd"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_elpd",
        "ref_id": "arviz-plot-elpd",
        "headings": [
          "arviz.plot_elpd"
        ]
      },
      "doc_lineno": 105
    }
  ],
  "api/generated/arviz.plot_energy": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_energy(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_energy"
          ],
          "code_str": "az.plot_energy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_energy"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_energy",
        "ref_id": "arviz-plot-energy",
        "headings": [
          "arviz.plot_energy"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_energy(data, kind='hist')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_energy"
          ],
          "code_str": "az.plot_energy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_energy"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_energy",
        "ref_id": "arviz-plot-energy",
        "headings": [
          "arviz.plot_energy"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_ess": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"centered_eight\")\n>>> coords = {\"school\": [\"Choate\", \"Lawrenceville\"]}\n>>> az.plot_ess(\n...     idata, kind=\"local\", var_names=[\"mu\", \"theta\"], coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      },
      "doc_lineno": 8
    },
    {
      "source": ">>> az.plot_ess(\n...     idata, kind=\"quantile\", var_names=['~thet'], filter_vars=\"like\", coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_ess(\n...     idata, kind=\"evolution\", var_names=[\"mu\", \"theta\"], coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_ess(\n...     idata, kind=\"local\", var_names=[\"mu\"], drawstyle=\"steps-mid\", color=\"k\",\n...     linestyle=\"-\", marker=None, rug=True, rug_kwargs={\"color\": \"r\"}\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> extra_kwargs = {\"color\": \"lightsteelblue\"}\n>>> az.plot_ess(\n...     idata, kind=\"evolution\", var_names=[\"mu\"],\n...     color=\"royalblue\", extra_kwargs=extra_kwargs\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ess"
          ],
          "code_str": "az.plot_ess",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_ess"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ess",
        "ref_id": "arviz-plot-ess",
        "headings": [
          "arviz.plot_ess"
        ]
      },
      "doc_lineno": 7
    }
  ],
  "api/generated/arviz.plot_forest": [
    {
      "source": ">>> import arviz as az\n>>> non_centered_data = az.load_arviz_data('non_centered_eight')\n>>> axes = az.plot_forest(non_centered_data,\n>>>                            kind='forestplot',\n>>>                            var_names=[\"^the\"],\n>>>                            filter_vars=\"regex\",\n>>>                            combined=True,\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      },
      "doc_lineno": 11
    },
    {
      "source": ">>> centered_data = az.load_arviz_data('centered_eight')\n>>> axes = az.plot_forest([non_centered_data, centered_data],\n>>>                            model_names = [\"non centered eight\", \"centered eight\"],\n>>>                            kind='forestplot',\n>>>                            var_names=[\"^the\"],\n>>>                            filter_vars=\"regex\",\n>>>                            combined=True,\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools models')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      },
      "doc_lineno": 11
    },
    {
      "source": ">>> rope = {'theta': [{'school': 'Choate', 'rope': (2, 4)}], 'mu': [{'rope': (-2, 2)}]}\n>>> axes = az.plot_forest(non_centered_data,\n>>>                            rope=rope,\n>>>                            var_names='~tau',\n>>>                            combined=True,\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      },
      "doc_lineno": 9
    },
    {
      "source": ">>> axes = az.plot_forest(non_centered_data,\n>>>                            kind='ridgeplot',\n>>>                            var_names=['theta'],\n>>>                            combined=True,\n>>>                            ridgeplot_overlap=3,\n>>>                            colors='white',\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      },
      "doc_lineno": 10
    },
    {
      "source": ">>> axes = az.plot_forest(non_centered_data,\n>>>                            kind='ridgeplot',\n>>>                            var_names=['theta'],\n>>>                            combined=True,\n>>>                            ridgeplot_truncate=False,\n>>>                            ridgeplot_quantiles=[.25, .5, .75],\n>>>                            ridgeplot_overlap=0.7,\n>>>                            colors='white',\n>>>                            figsize=(9, 7))\n>>> axes[0].set_title('Estimated theta for 8 schools model')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_forest",
        "ref_id": "arviz-plot-forest",
        "headings": [
          "arviz.plot_forest"
        ]
      },
      "doc_lineno": 12
    }
  ],
  "api/generated/arviz.plot_hdi": [
    {
      "source": ">>> import numpy as np\n>>> import arviz as az\n>>> x_data = np.random.normal(0, 1, 100)\n>>> y_data = np.random.normal(2 + x_data * 0.5, 0.5, size=(2, 50, 100))\n>>> az.plot_hdi(x_data, y_data)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_hdi",
        "ref_id": "arviz-plot-hdi",
        "headings": [
          "arviz.plot_hdi"
        ]
      },
      "doc_lineno": 7
    },
    {
      "source": ">>> hdi_data = az.hdi(y_data, input_core_dims=[[\"draw\"]])\n>>> ax = az.plot_hdi(x_data, hdi_data=hdi_data[0], color=\"r\", fill_kwargs={\"alpha\": .2})\n>>> az.plot_hdi(x_data, hdi_data=hdi_data[1], color=\"k\", ax=ax, fill_kwargs={\"alpha\": .2})",
      "names": [
        {
          "import_components": [
            "arviz",
            "hdi"
          ],
          "code_str": "az.hdi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.hdi"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_hdi",
        "ref_id": "arviz-plot-hdi",
        "headings": [
          "arviz.plot_hdi"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> X = np.random.normal(0,1,100)\n>>> Y = np.random.normal(2 + X * 0.5, 0.5, size=(2,10,100))\n>>> idata = az.from_dict(posterior={\"y\": Y}, constant_data={\"x\":X})\n>>> x_data = idata.constant_data.x\n>>> y_data = idata.posterior.y\n>>> az.plot_hdi(x_data, y_data)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_hdi",
        "ref_id": "arviz-plot-hdi",
        "headings": [
          "arviz.plot_hdi"
        ]
      },
      "doc_lineno": 8
    }
  ],
  "api/generated/arviz.plot_kde": [
    {
      "source": ">>> import arviz as az\n>>> non_centered = az.load_arviz_data('non_centered_eight')\n>>> mu_posterior = np.concatenate(non_centered.posterior[\"mu\"].values)\n>>> tau_posterior = np.concatenate(non_centered.posterior[\"tau\"].values)\n>>> az.plot_kde(mu_posterior)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 7
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, rug=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, adaptive=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, bw=\"scott\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, bw=0.4)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> rvs = np.random.vonmises(mu=np.pi, kappa=2, size=500)\n>>> az.plot_kde(rvs, is_circular=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 4
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, cumulative=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, rotated=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior,\n...             contour_kwargs={\"colors\":None, \"cmap\":plt.cm.viridis},\n...             contourf_kwargs={\"alpha\":0});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_kde(\n...     mu_posterior, values2=tau_posterior,\n...     contour_kwargs={\"levels\":3}, contourf_kwargs={\"levels\":3}\n... );",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior, hdi_probs=[0.3, 0.6, 0.9])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_kde(mu_posterior, values2=tau_posterior, contour=False)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_kde"
          ],
          "code_str": "az.plot_kde",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_kde"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_kde",
        "ref_id": "arviz-plot-kde",
        "headings": [
          "arviz.plot_kde"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_khat": [
    {
      "source": ">>> import arviz as az\n>>> radon = az.load_arviz_data(\"radon\")\n>>> loo_radon = az.loo(radon, pointwise=True)\n>>> az.plot_khat(loo_radon, show_bins=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.loo"
        },
        {
          "import_components": [
            "arviz",
            "plot_khat"
          ],
          "code_str": "az.plot_khat",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_khat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_khat",
        "ref_id": "arviz-plot-khat",
        "headings": [
          "arviz.plot_khat"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> centered_eight = az.load_arviz_data(\"centered_eight\")\n>>> khats = az.loo(centered_eight, pointwise=True).pareto_k\n>>> az.plot_khat(khats, xlabels=True, threshold=1)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.loo"
        },
        {
          "import_components": [
            "arviz",
            "plot_khat"
          ],
          "code_str": "az.plot_khat",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_khat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_khat",
        "ref_id": "arviz-plot-khat",
        "headings": [
          "arviz.plot_khat"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> counties = radon.posterior.County[radon.constant_data.county_idx].values\n>>> colors = [\n...     \"blue\" if county[-1] in (\"A\", \"N\") else \"green\" for county in counties\n... ]\n>>> az.plot_khat(loo_radon, color=colors)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_khat"
          ],
          "code_str": "az.plot_khat",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_khat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_khat",
        "ref_id": "arviz-plot-khat",
        "headings": [
          "arviz.plot_khat"
        ]
      },
      "doc_lineno": 7
    }
  ],
  "api/generated/arviz.plot_lm": [
    {
      "source": ">>> import arviz as az\n>>> import numpy as np\n>>> import xarray as xr\n>>> idata = az.load_arviz_data('regression1d')\n>>> x = xr.DataArray(np.linspace(0, 1, 100))\n>>> idata.posterior[\"y_model\"] = idata.posterior[\"intercept\"] + idata.posterior[\"slope\"]*x\n>>> az.plot_lm(idata=idata, y=\"y\", x=x)",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      },
      "doc_lineno": 9
    },
    {
      "source": ">>> az.plot_lm(idata=idata, y=\"y\", x=x, y_model=\"y_model\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_lm(\n...     idata=idata, y=\"y\", x=x, y_model=\"y_model\", kind_pp=\"hdi\", kind_model=\"hdi\"\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> data = az.from_dict(\n...     observed_data = { \"y\": np.random.normal(size=(5, 7)) },\n...     posterior_predictive = {\"y\": np.random.randn(4, 1000, 5, 7) / 2},\n...     dims={\"y\": [\"dim1\", \"dim2\"]},\n...     coords={\"dim1\": range(5), \"dim2\": range(7)}\n... )\n>>> az.plot_lm(idata=data, y=\"y\", plot_dim=\"dim1\")",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_lm"
          ],
          "code_str": "az.plot_lm",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "arviz.plot_lm"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_lm",
        "ref_id": "arviz-plot-lm",
        "headings": [
          "arviz.plot_lm"
        ]
      },
      "doc_lineno": 9
    }
  ],
  "api/generated/arviz.plot_loo_pit": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"radon\")\n>>> az.plot_loo_pit(idata=idata, y=\"y\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_loo_pit"
          ],
          "code_str": "az.plot_loo_pit",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_loo_pit"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_loo_pit",
        "ref_id": "arviz-plot-loo-pit",
        "headings": [
          "arviz.plot_loo_pit"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_loo_pit(idata=idata, y=\"y\", ecdf=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_loo_pit"
          ],
          "code_str": "az.plot_loo_pit",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_loo_pit"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_loo_pit",
        "ref_id": "arviz-plot-loo-pit",
        "headings": [
          "arviz.plot_loo_pit"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_mcse": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data(\"centered_eight\")\n>>> coords = {\"school\": [\"Deerfield\", \"Lawrenceville\"]}\n>>> az.plot_mcse(\n...     idata, var_names=[\"mu\", \"theta\"], coords=coords\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_mcse"
          ],
          "code_str": "az.plot_mcse",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_mcse"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_mcse",
        "ref_id": "arviz-plot-mcse",
        "headings": [
          "arviz.plot_mcse"
        ]
      },
      "doc_lineno": 8
    }
  ],
  "api/generated/arviz.plot_pair": [
    {
      "source": ">>> import arviz as az\n>>> centered = az.load_arviz_data('centered_eight')\n>>> coords = {'school': ['Choate', 'Deerfield']}\n>>> az.plot_pair(centered,\n>>>             var_names=['theta', 'mu', 'tau'],\n>>>             kind='kde',\n>>>             coords=coords,\n>>>             divergences=True,\n>>>             textsize=18)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_pair",
        "ref_id": "arviz-plot-pair",
        "headings": [
          "arviz.plot_pair"
        ]
      },
      "doc_lineno": 11
    },
    {
      "source": ">>> az.plot_pair(centered,\n>>>             var_names=['theta', 'mu'],\n>>>             coords=coords,\n>>>             textsize=18,\n>>>             kind='hexbin')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_pair",
        "ref_id": "arviz-plot-pair",
        "headings": [
          "arviz.plot_pair"
        ]
      },
      "doc_lineno": 7
    },
    {
      "source": ">>> az.plot_pair(centered,\n...             var_names=['^t', 'mu'],\n...             filter_vars=\"regex\",\n...             coords=coords,\n...             divergences=True,\n...             textsize=18)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_pair",
        "ref_id": "arviz-plot-pair",
        "headings": [
          "arviz.plot_pair"
        ]
      },
      "doc_lineno": 8
    }
  ],
  "api/generated/arviz.plot_parallel": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_parallel(data, var_names=[\"mu\", \"tau\"])",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_parallel"
          ],
          "code_str": "az.plot_parallel",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_parallel"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_parallel",
        "ref_id": "arviz-plot-parallel",
        "headings": [
          "arviz.plot_parallel"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_parallel(data, var_names=[\"mu\", \"tau\"], norm_method='normal')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_parallel"
          ],
          "code_str": "az.plot_parallel",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_parallel"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_parallel",
        "ref_id": "arviz-plot-parallel",
        "headings": [
          "arviz.plot_parallel"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_posterior": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_posterior(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu'])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu', '^the'], filter_vars=\"regex\", rope=(-1, 1))",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> rope = {'mu': [{'rope': (-2, 2)}], 'theta': [{'school': 'Choate', 'rope': (2, 4)}]}\n>>> az.plot_posterior(data, var_names=['mu', 'theta'], rope=rope)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 4
    },
    {
      "source": ">>> coords = {\"school\": [\"Choate\",\"Phillips Exeter\"]}\n>>> az.plot_posterior(data, var_names=[\"mu\", \"theta\"], coords=coords)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 4
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu', 'theta'], ref_val=0)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu', 'theta'], point_estimate='mode')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_posterior(data, ref_val= {\"theta\": [{\"school\": \"Deerfield\", \"ref_val\": 4},\n...                                             {\"school\": \"Choate\", \"ref_val\": 3}]})",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 4
    },
    {
      "source": ">>> az.plot_posterior(data, ref_val=[1] + [5] * 8 + [1])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu'], kind='hist')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_posterior(data, var_names=['mu'], hdi_prob=.75)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_posterior",
        "ref_id": "arviz-plot-posterior",
        "headings": [
          "arviz.plot_posterior"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_ppc": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('radon')\n>>> az.plot_ppc(data, data_pairs={\"y\":\"y\"})",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_ppc(data, kind='cumulative')",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> obs_county = data.posterior[\"County\"][data.constant_data[\"county_idx\"]]\n>>> data = data.assign_coords(obs_id=obs_county, groups=\"observed_vars\")\n>>> az.plot_ppc(data, coords={'obs_id': ['ANOKA', 'BELTRAMI']}, flatten=[])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> az.plot_ppc(data, kind='scatter', flatten=[],\n>>>             coords={'obs_id': ['AITKIN', 'BELTRAMI']})",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      },
      "doc_lineno": 4
    },
    {
      "source": ">>> az.plot_ppc(data, num_pp_samples=30, random_seed=7)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ppc",
        "ref_id": "arviz-plot-ppc",
        "headings": [
          "arviz.plot_ppc"
        ]
      },
      "doc_lineno": 3
    }
  ],
  "api/generated/arviz.plot_rank": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_rank(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_rank(data, var_names='tau')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      },
      "doc_lineno": 4
    },
    {
      "source": ">>> import matplotlib.pyplot as plt\n>>> centered_data = az.load_arviz_data('centered_eight')\n>>> noncentered_data = az.load_arviz_data('non_centered_eight')\n>>> _, ax = plt.subplots(1, 2, figsize=(12, 3))\n>>> az.plot_rank(centered_data, var_names=\"mu\", kind='vlines', ax=ax[0])\n>>> az.plot_rank(noncentered_data, var_names=\"mu\", kind='vlines', ax=ax[1])",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        },
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      },
      "doc_lineno": 8
    },
    {
      "source": ">>> az.plot_rank(noncentered_data, var_names=\"mu\", kind=\"vlines\",\n>>>              vlines_kwargs={'lw':0}, marker_vlines_kwargs={'lw':3});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_rank"
          ],
          "code_str": "az.plot_rank",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_rank"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_rank",
        "ref_id": "arviz-plot-rank",
        "headings": [
          "arviz.plot_rank"
        ]
      },
      "doc_lineno": 4
    }
  ],
  "api/generated/arviz.plot_separation": [
    {
      "source": ">>> import arviz as az\n>>> idata = az.load_arviz_data('classification10d')\n>>> az.plot_separation(idata=idata, y='outcome', y_hat='outcome', figsize=(8, 1))",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_separation"
          ],
          "code_str": "az.plot_separation",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_separation"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_separation",
        "ref_id": "arviz-plot-separation",
        "headings": [
          "arviz.plot_separation"
        ]
      },
      "doc_lineno": 5
    }
  ],
  "api/generated/arviz.plot_trace": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('non_centered_eight')\n>>> coords = {'school': ['Choate', 'Lawrenceville']}\n>>> az.plot_trace(data, var_names=('theta'), filter_vars=\"like\", coords=coords)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      },
      "doc_lineno": 6
    },
    {
      "source": ">>> az.plot_trace(data, compact=True)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_trace(data, var_names=[\"mu\", \"tau\"], kind=\"rank_bars\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      },
      "doc_lineno": 3
    },
    {
      "source": ">>> az.plot_trace(\n>>>     data, var_names=('^theta'), filter_vars=\"regex\", coords=coords, combined=True\n>>> )",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      },
      "doc_lineno": 5
    },
    {
      "source": ">>> lines = (('theta_t',{'school': \"Choate\"}, [-1]),)\n>>> az.plot_trace(data, var_names=('theta_t', 'theta'), coords=coords, lines=lines)",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_trace",
        "ref_id": "arviz-plot-trace",
        "headings": [
          "arviz.plot_trace"
        ]
      },
      "doc_lineno": 4
    }
  ],
  "api/generated/arviz.plot_ts": [
    {
      "source": ">>> import arviz as az\n>>> nchains, ndraws = (4, 500)\n>>> obs_data = {\n...     \"y\": 2 * np.arange(1, 9) + 3,\n...     \"z\": 2 * np.arange(8, 12) + 3,\n... }\n>>> posterior_predictive = {\n...     \"y\": np.random.normal(\n...         (obs_data[\"y\"] * 1.2) - 3, size=(nchains, ndraws, len(obs_data[\"y\"]))\n...     ),\n...     \"z\": np.random.normal(\n...         (obs_data[\"z\"] * 1.2) - 3, size=(nchains, ndraws, len(obs_data[\"z\"]))\n...     ),\n...  }\n>>> idata = az.from_dict(\n...     observed_data=obs_data,\n...     posterior_predictive=posterior_predictive,\n...     coords={\"obs_dim\": np.arange(1, 9), \"pred_dim\": np.arange(8, 12)},\n...     dims={\"y\": [\"obs_dim\"], \"z\": [\"pred_dim\"]},\n... )\n>>> ax = az.plot_ts(idata=idata, y=\"y\", y_holdout=\"z\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_ts"
          ],
          "code_str": "az.plot_ts",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "arviz.plot_ts"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ts",
        "ref_id": "arviz-plot-ts",
        "headings": [
          "arviz.plot_ts"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": ">>> ndim1, ndim2 = (5, 7)\n>>> data = {\n...     \"y\": np.random.normal(size=(ndim1, ndim2)),\n...     \"z\": np.random.normal(size=(ndim1, ndim2)),\n... }\n>>> posterior_predictive = {\n...     \"y\": np.random.randn(nchains, ndraws, ndim1, ndim2),\n...     \"z\": np.random.randn(nchains, ndraws, ndim1, ndim2),\n... }\n>>> const_data = {\"x\": np.arange(1, 6), \"x_pred\": np.arange(5, 10)}\n>>> idata = az.from_dict(\n...     observed_data=data,\n...     posterior_predictive=posterior_predictive,\n...     constant_data=const_data,\n...     dims={\n...         \"y\": [\"dim1\", \"dim2\"],\n...         \"z\": [\"holdout_dim1\", \"holdout_dim2\"],\n...     },\n...     coords={\n...         \"dim1\": range(ndim1),\n...         \"dim2\": range(ndim2),\n...         \"holdout_dim1\": range(ndim1 - 1, ndim1 + 4),\n...         \"holdout_dim2\": range(ndim2 - 1, ndim2 + 6),\n...     },\n... )\n>>> az.plot_ts(\n...     idata=idata,\n...     y=\"y\",\n...     plot_dim=\"dim1\",\n...     y_holdout=\"z\",\n...     holdout_dim=\"holdout_dim1\",\n... )",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        },
        {
          "import_components": [
            "arviz",
            "plot_ts"
          ],
          "code_str": "az.plot_ts",
          "lineno": 26,
          "end_lineno": 26,
          "context": "none",
          "resolved_location": "arviz.plot_ts"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_ts",
        "ref_id": "arviz-plot-ts",
        "headings": [
          "arviz.plot_ts"
        ]
      },
      "doc_lineno": 34
    }
  ],
  "api/generated/arviz.plot_violin": [
    {
      "source": ">>> import arviz as az\n>>> data = az.load_arviz_data('centered_eight')\n>>> az.plot_violin(data)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_violin"
          ],
          "code_str": "az.plot_violin",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_violin"
        }
      ],
      "example": {
        "document": "api/generated/arviz.plot_violin",
        "ref_id": "arviz-plot-violin",
        "headings": [
          "arviz.plot_violin"
        ]
      },
      "doc_lineno": 5
    }
  ],
  "api/generated/arviz.psislw": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data(\"centered_eight\")\n   ...: log_likelihood = data.sample_stats.log_likelihood.stack(\n   ...:     __sample__=(\"chain\", \"draw\")\n   ...: )\n   ...: az.psislw(-log_likelihood, reff=0.8)\n   ...: \nOut[1]: \n(<xarray.DataArray 'log_weights' (school: 8, __sample__: 2000)>\n array([[-7.34995066, -6.32418143, -7.41094349, ..., -8.46666497,\n         -6.96363409, -7.14223582],\n        [-6.44840009, -7.55679071, -7.18955445, ..., -7.72602726,\n         -7.07920345, -7.48188027],\n        [-7.76466076, -7.76043872, -7.7644619 , ..., -7.64961779,\n         -6.9420515 , -7.5451356 ],\n        ...,\n        [-7.32584608, -7.76025117, -7.70454826, ..., -7.73877505,\n         -7.61780418, -7.74341114],\n        [-7.10727871, -6.20091776, -6.42891471, ..., -6.96829636,\n         -8.6763585 , -8.42513384],\n        [-7.19682912, -7.48004722, -7.48344873, ..., -7.48068176,\n         -7.64687783, -7.65904775]])\n Coordinates:\n   * school      (school) object 'Choate' 'Deerfield' ... 'Mt. Hermon'\n   * __sample__  (__sample__) MultiIndex\n   - chain       (__sample__) int64 0 0 0 0 0 0 0 0 0 0 0 ... 3 3 3 3 3 3 3 3 3 3\n   - draw        (__sample__) int64 0 1 2 3 4 5 6 ... 493 494 495 496 497 498 499,\n <xarray.DataArray 'pareto_shape' (school: 8)>\n array([0.35683758, 0.32524967, 0.53342172, 0.33519276, 0.25373991,\n        0.64466503, 0.71238247, 0.28943932])\n Coordinates:\n   * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "psislw"
          ],
          "code_str": "az.psislw",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.psislw"
        }
      ],
      "example": {
        "document": "api/generated/arviz.psislw",
        "ref_id": "arviz-psislw",
        "headings": [
          "arviz.psislw"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.r2_score": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data('regression1d')\n   ...: y_true = data.observed_data[\"y\"].values\n   ...: y_pred = data.posterior_predictive.stack(sample=(\"chain\", \"draw\"))[\"y\"].values.T\n   ...: az.r2_score(y_true, y_pred)\n   ...: \nOut[1]: \nr2        0.683197\nr2_std    0.036884\ndtype: float64",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "r2_score"
          ],
          "code_str": "az.r2_score",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.r2_score"
        }
      ],
      "example": {
        "document": "api/generated/arviz.r2_score",
        "ref_id": "arviz-r2-score",
        "headings": [
          "arviz.r2_score"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.rc_context": [],
  "api/generated/arviz.reloo": [],
  "api/generated/arviz.rhat": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data(\"non_centered_eight\")\n   ...: az.rhat(data)\n   ...: \nOut[1]: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    mu       float64 1.0\n    theta_t  (school) float64 1.001 1.002 1.004 1.0 0.9999 1.0 1.0 1.006\n    tau      float64 1.001\n    theta    (school) float64 1.001 1.001 1.008 1.001 1.0 1.002 1.001 1.001",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "rhat"
          ],
          "code_str": "az.rhat",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.rhat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.rhat",
        "ref_id": "arviz-rhat",
        "headings": [
          "arviz.rhat"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: az.rhat(data, var_names=[\"mu\", \"theta_t\"], method=\"folded\")\nOut[2]: \n<xarray.Dataset>\nDimensions:  (school: 8)\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'\nData variables:\n    mu       float64 1.0\n    theta_t  (school) float64 1.0 1.002 1.004 1.0 0.9999 1.0 1.0 1.006",
      "names": [
        {
          "import_components": [
            "arviz",
            "rhat"
          ],
          "code_str": "az.rhat",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.rhat"
        }
      ],
      "example": {
        "document": "api/generated/arviz.rhat",
        "ref_id": "arviz-rhat",
        "headings": [
          "arviz.rhat"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.sel_utils.xarray_sel_iter": [],
  "api/generated/arviz.sel_utils.xarray_to_ndarray": [],
  "api/generated/arviz.sel_utils.xarray_var_iter": [],
  "api/generated/arviz.show_layout": [],
  "api/generated/arviz.summary": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data(\"centered_eight\")\n   ...: az.summary(data, var_names=[\"mu\", \"tau\"])\n   ...: \nOut[1]: \n      mean     sd  hdi_3%  hdi_97%  ...  mcse_sd  ess_bulk  ess_tail  r_hat\nmu   4.093  3.372  -2.118   10.403  ...    0.152     250.0     643.0   1.03\ntau  4.089  3.001   0.569    9.386  ...    0.178      79.0      54.0   1.07\n\n[2 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "api/generated/arviz.summary",
        "ref_id": "arviz-summary",
        "headings": [
          "arviz.summary"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: az.summary(data, var_names=[\"the\"], filter_vars=\"like\")\nOut[2]: \n                          mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\ntheta[Choate]            6.026  5.782  -3.707  ...     348.0     743.0   1.02\ntheta[Deerfield]         4.724  4.736  -4.039  ...     471.0    1018.0   1.02\ntheta[Phillips Andover]  3.576  5.559  -6.779  ...     463.0     674.0   1.01\ntheta[Phillips Exeter]   4.478  4.939  -5.528  ...     503.0     666.0   1.01\ntheta[Hotchkiss]         3.064  4.642  -5.972  ...     380.0     833.0   1.02\ntheta[Lawrenceville]     3.821  4.979  -5.507  ...     516.0    1104.0   1.02\ntheta[St. Paul's]        6.250  5.436  -3.412  ...     402.0    1026.0   1.02\ntheta[Mt. Hermon]        4.544  5.521  -5.665  ...     449.0    1084.0   1.01\n\n[8 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "api/generated/arviz.summary",
        "ref_id": "arviz-summary",
        "headings": [
          "arviz.summary"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [3]: az.summary(data, var_names=[\"~^t\"], filter_vars=\"regex\")\nOut[3]: \n     mean     sd  hdi_3%  hdi_97%  ...  mcse_sd  ess_bulk  ess_tail  r_hat\nmu  4.093  3.372  -2.118   10.403  ...    0.152     250.0     643.0   1.03\n\n[1 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "api/generated/arviz.summary",
        "ref_id": "arviz-summary",
        "headings": [
          "arviz.summary"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [4]: import numpy as np\n   ...: def median_sd(x):\n   ...:     median = np.percentile(x, 50)\n   ...:     sd = np.sqrt(np.mean((x-median)**2))\n   ...:     return sd\n   ...: \n   ...: func_dict = {\n   ...:     \"std\": np.std,\n   ...:     \"median_std\": median_sd,\n   ...:     \"5%\": lambda x: np.percentile(x, 5),\n   ...:     \"median\": lambda x: np.percentile(x, 50),\n   ...:     \"95%\": lambda x: np.percentile(x, 95),\n   ...: }\n   ...: az.summary(\n   ...:     data,\n   ...:     var_names=[\"mu\", \"tau\"],\n   ...:     stat_funcs=func_dict,\n   ...:     extend=False\n   ...: )\n   ...: \nOut[4]: \n       std  median_std     5%  median    95%\nmu   3.371       3.374 -1.312   3.961  9.640\ntau  3.000       3.113  0.785   3.258  9.659",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "percentile"
          ],
          "code_str": "np.percentile",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.percentile"
        },
        {
          "import_components": [
            "numpy",
            "mean"
          ],
          "code_str": "np.mean",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.mean"
        },
        {
          "import_components": [
            "numpy",
            "sqrt"
          ],
          "code_str": "np.sqrt",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.sqrt"
        },
        {
          "import_components": [
            "numpy",
            "std"
          ],
          "code_str": "np.std",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.std"
        },
        {
          "import_components": [
            "numpy",
            "percentile"
          ],
          "code_str": "np.percentile",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "numpy.percentile"
        },
        {
          "import_components": [
            "numpy",
            "percentile"
          ],
          "code_str": "np.percentile",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.percentile"
        },
        {
          "import_components": [
            "numpy",
            "percentile"
          ],
          "code_str": "np.percentile",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.percentile"
        },
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "api/generated/arviz.summary",
        "ref_id": "arviz-summary",
        "headings": [
          "arviz.summary"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [5]: az.summary(data, stat_focus=\"median\")\nOut[5]: \n                         median    mad  eti_3%  ...  ess_median  ess_tail  r_hat\nmu                        3.961  2.272  -2.094  ...     237.125     643.0   1.03\ntheta[Choate]             5.203  3.503  -2.793  ...     236.224     743.0   1.02\ntheta[Deerfield]          4.524  3.075  -3.935  ...     279.713    1018.0   1.02\ntheta[Phillips Andover]   3.670  3.176  -6.941  ...     317.787     674.0   1.01\ntheta[Phillips Exeter]    4.382  3.194  -4.773  ...     324.381     666.0   1.01\ntheta[Hotchkiss]          3.200  3.022  -5.936  ...     330.858     833.0   1.02\ntheta[Lawrenceville]      3.833  3.178  -6.043  ...     379.323    1104.0   1.02\ntheta[St. Paul's]         5.695  3.358  -2.724  ...     329.814    1026.0   1.02\ntheta[Mt. Hermon]         4.296  3.271  -5.426  ...     262.412    1084.0   1.01\ntau                       3.258  1.669   0.702  ...     199.243      54.0   1.07\n\n[10 rows x 8 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "api/generated/arviz.summary",
        "ref_id": "arviz-summary",
        "headings": [
          "arviz.summary"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.to_cds": [],
  "api/generated/arviz.to_netcdf": [],
  "api/generated/arviz.waic": [
    {
      "source": "In [1]: import arviz as az\n   ...: data = az.load_arviz_data(\"centered_eight\")\n   ...: az.waic(data)\n   ...: \nOut[1]: \nComputed from 2000 posterior samples and 8 observations log-likelihood matrix.\n\n          Estimate       SE\nelpd_waic   -30.76     1.42\np_waic        0.90        -",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "waic"
          ],
          "code_str": "az.waic",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.waic"
        }
      ],
      "example": {
        "document": "api/generated/arviz.waic",
        "ref_id": "arviz-waic",
        "headings": [
          "arviz.waic"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: data_waic = az.waic(data, pointwise=True)\n   ...: data_waic.waic_i\n   ...: \nOut[2]: \n<xarray.DataArray 'waic_i' (school: 8)>\narray([-4.91534201, -3.41568055, -3.85543363, -3.46533901, -3.40121364,\n       -3.4765078 , -4.27523419, -3.95322615])\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [
        {
          "import_components": [
            "arviz",
            "waic"
          ],
          "code_str": "az.waic",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.waic"
        }
      ],
      "example": {
        "document": "api/generated/arviz.waic",
        "ref_id": "arviz-waic",
        "headings": [
          "arviz.waic"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "api/generated/arviz.wrap_xarray_ufunc": [],
  "api/index": [],
  "api/inference_data": [],
  "api/plot_utils": [],
  "api/plots": [],
  "api/rcparams": [],
  "api/stats": [],
  "api/stats_refitting": [],
  "api/stats_utils": [],
  "api/utils": [],
  "api/wrappers": [],
  "community": [],
  "contributing/architecture": [],
  "contributing/content_structure": [],
  "contributing/contributing_prs": [],
  "contributing/developing_in_docker": [],
  "contributing/diataxis_for_arviz": [],
  "contributing/doc_toolchain": [],
  "contributing/docstrings": [],
  "contributing/index": [],
  "contributing/issue_reports": [],
  "contributing/issue_triaging": [],
  "contributing/outreach": [],
  "contributing/plotting_backends": [],
  "contributing/pr_checklist": [],
  "contributing/pr_tutorial": [],
  "contributing/review_prs": [],
  "contributing/running_benchmarks": [],
  "contributing/sphinx_doc_build": [],
  "contributing/syntax_guide": [],
  "examples/index": [],
  "examples/plot_autocorr": [],
  "examples/plot_bpv": [],
  "examples/plot_bpv_tstat": [],
  "examples/plot_compare": [],
  "examples/plot_density": [],
  "examples/plot_dist": [],
  "examples/plot_dot": [],
  "examples/plot_elpd": [],
  "examples/plot_energy": [],
  "examples/plot_ess_evolution": [],
  "examples/plot_ess_local": [],
  "examples/plot_ess_quantile": [],
  "examples/plot_forest": [],
  "examples/plot_forest_ridge": [],
  "examples/plot_hdi": [],
  "examples/plot_joint": [],
  "examples/plot_kde": [],
  "examples/plot_kde_2d": [],
  "examples/plot_kde_2d_bis": [],
  "examples/plot_kde_2d_hdi": [],
  "examples/plot_kde_quantiles": [],
  "examples/plot_khat": [],
  "examples/plot_lm": [],
  "examples/plot_loo_pit_ecdf": [],
  "examples/plot_loo_pit_overlay": [],
  "examples/plot_mcse": [],
  "examples/plot_mcse_errorbar": [],
  "examples/plot_pair": [],
  "examples/plot_pair_hex": [],
  "examples/plot_pair_kde": [],
  "examples/plot_pair_kde_hdi": [],
  "examples/plot_pair_point_estimate": [],
  "examples/plot_parallel": [],
  "examples/plot_parallel_minmax": [],
  "examples/plot_parallel_normal": [],
  "examples/plot_parallel_rank": [],
  "examples/plot_posterior": [],
  "examples/plot_posterior_combinedims": [],
  "examples/plot_ppc": [],
  "examples/plot_ppc_cumulative": [],
  "examples/plot_rank": [],
  "examples/plot_separation": [],
  "examples/plot_trace": [],
  "examples/plot_trace_bars": [],
  "examples/plot_trace_circ": [],
  "examples/plot_trace_vlines": [],
  "examples/plot_violin": [],
  "examples/styles": [],
  "external_resources": [],
  "getting_started/ConversionGuideEmcee": [
    {
      "source": "import arviz as az\nimport numpy as np\nimport emcee",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "az.style.use(\"arviz-darkgrid\")",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "J = 8\ny_obs = np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0])\nsigma = np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "def log_prior_8school(theta):\n    mu, tau, eta = theta[0], theta[1], theta[2:]\n    # Half-cauchy prior, hwhm=25\n    if tau < 0:\n        return -np.inf\n    prior_tau = -np.log(tau ** 2 + 25 ** 2)\n    prior_mu = -(mu / 10) ** 2  # normal prior, loc=0, scale=10\n    prior_eta = -np.sum(eta ** 2)  # normal prior, loc=0, scale=1\n    return prior_mu + prior_tau + prior_eta\n\ndef log_likelihood_8school(theta, y, s):\n    mu, tau, eta = theta[0], theta[1], theta[2:]\n    return -((mu + tau * eta - y) / s) ** 2\n\ndef lnprob_8school(theta, y, s):\n    prior = log_prior_8school(theta)\n    like_vect = log_likelihood_8school(theta, y, s)\n    like = np.sum(like_vect)\n    return like + prior",
      "names": [
        {
          "import_components": [
            "numpy",
            "inf"
          ],
          "code_str": "np.inf",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.inf"
        },
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.log"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.sum"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "nwalkers = 40  # called chains in ArviZ\nndim = J + 2\ndraws = 1500\npos = np.random.normal(size=(nwalkers, ndim))\npos[:, 1] = np.absolute(pos[:, 1])\nsampler = emcee.EnsembleSampler(\n    nwalkers,\n    ndim,\n    lnprob_8school,\n    args=(y_obs, sigma)\n)\nsampler.run_mcmc(pos, draws);",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "absolute"
          ],
          "code_str": "np.absolute",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.absolute"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "converting-emcee-objects-to-inferencedata",
        "headings": [
          "Converting emcee objects to InferenceData"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "# define variable names, it cannot be inferred from emcee\nvar_names = [\"mu\", \"tau\"] + [\"eta{}\".format(i) for i in range(J)]\nidata1 = az.from_emcee(sampler, var_names=var_names)\nidata1",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "manually-set-variable-names",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Manually set variable names"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "idata1.sel(draw=slice(100, None))",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "manually-set-variable-names",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Manually set variable names"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "az.plot_posterior(idata1, var_names=[\"mu\", \"tau\", \"eta4\"])",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "manually-set-variable-names",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Manually set variable names"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "idata2 = az.from_emcee(sampler, slices=[0, 1, slice(2, None)])\nidata2",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "structuring-the-posterior-as-multidimensional-variables",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Structuring the posterior as multidimensional variables"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "az.plot_trace(idata2, var_names=[\"var_2\"], coords={\"var_2_dim_0\": 4});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "structuring-the-posterior-as-multidimensional-variables",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Structuring the posterior as multidimensional variables"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "def lnprob_8school_blobs(theta, y, s):\n    prior = log_prior_8school(theta)\n    like_vect = log_likelihood_8school(theta, y, s)\n    like = np.sum(like_vect)\n    return like + prior, like_vect\n\nsampler_blobs = emcee.EnsembleSampler(\n    nwalkers,\n    ndim,\n    lnprob_8school_blobs,\n    args=(y_obs, sigma),\n)\nsampler_blobs.run_mcmc(pos, draws);",
      "names": [
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "blobs-unlock-sample-stats-posterior-predictive-and-miscellanea",
        "headings": [
          "Converting emcee objects to InferenceData",
          "blobs: unlock sample stats, posterior predictive and miscellanea"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "dims = {\"eta\": [\"school\"], \"log_likelihood\": [\"school\"]}\nidata3 = az.from_emcee(\n    sampler_blobs,\n    var_names = [\"mu\", \"tau\", \"eta\"],\n    slices=[0, 1, slice(2,None)],\n    blob_names=[\"log_likelihood\"],\n    dims=dims,\n    coords={\"school\": range(8)}\n)\nidata3",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "blobs-unlock-sample-stats-posterior-predictive-and-miscellanea",
        "headings": [
          "Converting emcee objects to InferenceData",
          "blobs: unlock sample stats, posterior predictive and miscellanea"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "sampler_blobs.blobs[0, 1]",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "def lnprob_8school_blobs(theta, y, sigma):\n    mu, tau, eta = theta[0], theta[1], theta[2:]\n    prior = log_prior_8school(theta)\n    like_vect = log_likelihood_8school(theta, y, sigma)\n    like = np.sum(like_vect)\n    # store pointwise log likelihood, useful for model comparison with az.loo or az.waic\n    # and posterior predictive samples as blobs\n    return like + prior, (like_vect, np.random.normal((mu + tau * eta), sigma))\n\nsampler_blobs = emcee.EnsembleSampler(\n    nwalkers,\n    ndim,\n    lnprob_8school_blobs,\n    args=(y_obs, sigma),\n)\nsampler_blobs.run_mcmc(pos, draws);\n\ndims = {\"eta\": [\"school\"], \"log_likelihood\": [\"school\"], \"y\": [\"school\"]}\nidata4 = az.from_emcee(\n    sampler_blobs,\n    var_names = [\"mu\", \"tau\", \"eta\"],\n    slices=[0, 1, slice(2,None)],\n    arg_names=[\"y\",\"sigma\"],\n    arg_groups=[\"observed_data\", \"constant_data\"],\n    blob_names=[\"log_likelihood\", \"y\"],\n    blob_groups=[\"log_likelihood\", \"posterior_predictive\"],\n    dims=dims,\n    coords={\"school\": range(8)}\n)\nidata4",
      "names": [
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.sum"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "from_emcee"
          ],
          "code_str": "az.from_emcee",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "arviz.from_emcee"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "az.plot_ppc(idata4, var_names=[\"y\"], alpha=0.3, num_pp_samples=200);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "%load_ext watermark\n%watermark -n -u -v -iv -w",
      "names": [],
      "example": {
        "document": "getting_started/ConversionGuideEmcee",
        "ref_id": "multi-group-blobs",
        "headings": [
          "Converting emcee objects to InferenceData",
          "Multi-group blobs"
        ]
      },
      "doc_lineno": 320002
    }
  ],
  "getting_started/CreatingInferenceData": [
    {
      "source": "import arviz as az\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "creating-inferencedata",
        "headings": [
          "Creating InferenceData"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "size = 100\ndataset = az.convert_to_inference_data(np.random.randn(size))\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-1d-numpy-array",
        "headings": [
          "Creating InferenceData",
          "From 1D numpy array"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "shape = (1, 2, 3, 4, 5)\ndataset = az.convert_to_inference_data(np.random.randn(*shape))\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-nd-numpy-array",
        "headings": [
          "Creating InferenceData",
          "From nD numpy array"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "datadict = {\n    \"a\": np.random.randn(100),\n    \"b\": np.random.randn(1, 100, 10),\n    \"c\": np.random.randn(1, 100, 3, 4),\n}\ndataset = az.convert_to_inference_data(datadict)\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-a-dictionary",
        "headings": [
          "Creating InferenceData",
          "From a dictionary"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "datadict = {\n    \"a\": np.random.randn(100),\n    \"b\": np.random.randn(1, 100, 10),\n    \"c\": np.random.randn(1, 100, 3, 4),\n}\ncoords = {\"c1\": np.arange(3), \"c2\": np.arange(4), \"b1\": np.arange(10)}\ndims = {\"b\": [\"b1\"], \"c\": [\"c1\", \"c2\"]}\n\ndataset = az.convert_to_inference_data(datadict, coords=coords, dims=dims)\ndataset",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "convert_to_inference_data"
          ],
          "code_str": "az.convert_to_inference_data",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.convert_to_inference_data"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-dictionary-with-coords-and-dims",
        "headings": [
          "Creating InferenceData",
          "From dictionary with coords and dims"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "import pandas as pd\nimport xarray as xr\n\ndata = np.random.rand(100,2)\ndf = pd.DataFrame({'a':data[:,0], 'b':data[:,1]})\ndf[\"chain\"] = 0\ndf[\"draw\"] = np.arange(len(df), dtype=int)\ndf = df.set_index([\"chain\", \"draw\"])\nxdata = xr.Dataset.from_dataframe(df)\n\ndataset = az.InferenceData(posterior=xdata)\ndataset",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "rand"
          ],
          "code_str": "np.random.rand",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.rand"
        },
        {
          "import_components": [
            "pandas",
            "DataFrame"
          ],
          "code_str": "pd.DataFrame",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "pandas.core.frame.DataFrame"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "InferenceData"
          ],
          "code_str": "az.InferenceData",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "arviz.data.inference_data.InferenceData"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-dataframe",
        "headings": [
          "Creating InferenceData",
          "From Dataframe"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "import pymc3 as pm\n\ndraws = 500\nchains = 2\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pymc3",
        "headings": [
          "Creating InferenceData",
          "From PyMC3"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "with pm.Model() as model:\n    mu = pm.Normal(\"mu\", mu=0, sd=5)\n    tau = pm.HalfCauchy(\"tau\", beta=5)\n    theta_tilde = pm.Normal(\"theta_tilde\", mu=0, sd=1, shape=eight_school_data[\"J\"])\n    theta = pm.Deterministic(\"theta\", mu + tau * theta_tilde)\n    pm.Normal(\n        \"obs\", mu=theta, sd=eight_school_data[\"sigma\"], observed=eight_school_data[\"y\"]\n    )\n\n    trace = pm.sample(draws, chains=chains)\n    prior = pm.sample_prior_predictive()\n    posterior_predictive = pm.sample_posterior_predictive(trace)\n\n    pm_data = az.from_pymc3(\n        trace=trace,\n        prior=prior,\n        posterior_predictive=posterior_predictive,\n        coords={\"school\": np.arange(eight_school_data[\"J\"])},\n        dims={\"theta\": [\"school\"], \"theta_tilde\": [\"school\"]},\n    )\npm_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 18,
          "end_lineno": 18,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pymc3",
        "headings": [
          "Creating InferenceData",
          "From PyMC3"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "import pystan\n\nschools_code = \"\"\"\ndata {\n    int<lower=0> J;\n    real y[J];\n    real<lower=0> sigma[J];\n}\n\nparameters {\n    real mu;\n    real<lower=0> tau;\n    real theta_tilde[J];\n}\n\ntransformed parameters {\n    real theta[J];\n    for (j in 1:J)\n        theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n    mu ~ normal(0, 5);\n    tau ~ cauchy(0, 5);\n    theta_tilde ~ normal(0, 1);\n    y ~ normal(theta, sigma);\n}\n\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\nstan_model = pystan.StanModel(model_code=schools_code)\nfit = stan_model.sampling(data=eight_school_data, control={\"adapt_delta\": 0.9})\n\nstan_data = az.from_pystan(\n    posterior=fit,\n    posterior_predictive=\"y_hat\",\n    observed_data=[\"y\"],\n    log_likelihood={\"y\": \"log_lik\"},\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\n\nstan_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 41,
          "end_lineno": 41,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 53,
          "end_lineno": 53,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pystan",
        "headings": [
          "Creating InferenceData",
          "From PyStan"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "import pyro\nimport pyro.distributions as dist\nimport torch\nfrom pyro.infer import MCMC, NUTS, Predictive\n\npyro.enable_validation(True)\npyro.set_rng_seed(0)\n\ndraws = 500\nchains = 2\neight_school_data = {\n    \"J\": 8,\n    \"y\": torch.tensor([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": torch.tensor([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\n\ndef model(J, sigma, y=None):\n    mu = pyro.sample(\"mu\", dist.Normal(0, 5))\n    tau = pyro.sample(\"tau\", dist.HalfCauchy(5))\n    with pyro.plate(\"J\", J):\n        theta_tilde = pyro.sample(\"theta_tilde\", dist.Normal(0, 1))\n        theta = mu + tau * theta_tilde\n        return pyro.sample(\"obs\", dist.Normal(theta, sigma), obs=y)\n\n\nnuts_kernel = NUTS(model, jit_compile=True, ignore_jit_warnings=True)\nmcmc = MCMC(\n    nuts_kernel,\n    num_samples=draws,\n    warmup_steps=draws,\n    num_chains=chains,\n    disable_progbar=True,\n)\nmcmc.run(**eight_school_data)\nposterior_samples = mcmc.get_samples()\nposterior_predictive = Predictive(model, posterior_samples)(\n    eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\nprior = Predictive(model, num_samples=500)(\n    eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\n\npyro_data = az.from_pyro(\n    mcmc,\n    prior=prior,\n    posterior_predictive=posterior_predictive,\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\"theta\": [\"school\"]},\n)\npyro_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_pyro"
          ],
          "code_str": "az.from_pyro",
          "lineno": 44,
          "end_lineno": 44,
          "context": "none",
          "resolved_location": "arviz.from_pyro"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-pyro",
        "headings": [
          "Creating InferenceData",
          "From Pyro"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "from cmdstanpy import CmdStanModel\n\nschools_code = \"\"\"\ndata {\n    int<lower=0> J;\n    real y[J];\n    real<lower=0> sigma[J];\n}\n\nparameters {\n    real mu;\n    real<lower=0> tau;\n    real theta_tilde[J];\n}\n\ntransformed parameters {\n    real theta[J];\n    for (j in 1:J)\n        theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n    mu ~ normal(0, 5);\n    tau ~ cauchy(0, 5);\n    theta_tilde ~ normal(0, 1);\n    y ~ normal(theta, sigma);\n}\n\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\nwith open(\"./eight_school.stan\", \"w\") as f:\n    print(schools_code, file=f)\n\nstan_file = \"./eight_school.stan\"\nstan_model = CmdStanModel(stan_file=stan_file)\nstan_model.compile()\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\nstan_fit = stan_model.sample(data=eight_school_data)\n\ncmdstanpy_data = az.from_cmdstanpy(\n    posterior=stan_fit,\n    posterior_predictive=\"y_hat\",\n    observed_data={\"y\": eight_school_data[\"y\"]},\n    log_likelihood=\"log_lik\",\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\ncmdstanpy_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 48,
          "end_lineno": 48,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 49,
          "end_lineno": 49,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 59,
          "end_lineno": 59,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_cmdstanpy"
          ],
          "code_str": "az.from_cmdstanpy",
          "lineno": 54,
          "end_lineno": 54,
          "context": "none",
          "resolved_location": "arviz.from_cmdstanpy"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-cmdstanpy",
        "headings": [
          "Creating InferenceData",
          "From CmdStanPy"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "# save for CmdStan example (needs CmdStanPy run)\nstan_fit.save_csvfiles(dir=\"sample_data\")",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      },
      "doc_lineno": 260002
    },
    {
      "source": "schools_code = \"\"\"\ndata {\n    int<lower=0> J;\n    real y[J];\n    real<lower=0> sigma[J];\n}\n\nparameters {\n    real mu;\n    real<lower=0> tau;\n    real theta_tilde[J];\n}\n\ntransformed parameters {\n    real theta[J];\n    for (j in 1:J)\n        theta[j] = mu + tau * theta_tilde[j];\n}\n\nmodel {\n    mu ~ normal(0, 5);\n    tau ~ cauchy(0, 5);\n    theta_tilde ~ normal(0, 1);\n    y ~ normal(theta, sigma);\n}\n\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\nwith open(\"./eight_school.stan\", \"w\") as f:\n    print(schools_code, file=f)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "eight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      },
      "doc_lineno": 280002
    },
    {
      "source": "import pystan\n\npystan.stan_rdump(eight_school_data, \"./eight_school.data.R\")",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "# Bash shell\n#\n# $ cd cmdstan\n# $ make build\n# $ make path/to/eight_school\n# $ cd path/to\n# $ for i in {1..4}\n#   do\n#     ./eight_school sample random seed=12345 \\\n#       id=$i data file=eight_school.data.R \\\n#       output file=sample_data/eight_school_samples-$i.csv &\n#   done\n# $",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "# Let's use .stan and .csv files created/saved by the CmdStanPy procedure\n\n# glob string\nposterior_glob = \"sample_data/eight_school-*-[0-9].csv\"\n# list of paths\n# posterior_list =  [\n#     \"sample_data/eight_school-*-1.csv\",\n#     \"sample_data/eight_school-*-2.csv\",\n#     \"sample_data/eight_school-*-3.csv\",\n#     \"sample_data/eight_school-*-4.csv\",\n# ]\n\nobs_data_path = \"./eight_school.data.R\"\n\ncmdstan_data = az.from_cmdstan(\n    posterior=posterior_glob,\n    posterior_predictive=\"y_hat\",\n    observed_data=obs_data_path,\n    observed_data_var=\"y\",\n    log_likelihood=\"log_lik\",\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\ncmdstan_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 21,
          "end_lineno": 21,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_cmdstan"
          ],
          "code_str": "az.from_cmdstan",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "arviz.from_cmdstan"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "cmdstan-helpers",
        "headings": [
          "Creating InferenceData",
          "From CmdStan",
          "CmdStan helpers"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "import numpyro\nimport numpyro.distributions as dist\n\nfrom jax.random import PRNGKey\nfrom numpyro.distributions.transforms import AffineTransform\nfrom numpyro.infer import MCMC, NUTS, Predictive\n\nnumpyro.set_host_device_count(4)\n\neight_school_data = {\n    \"J\": 8,\n    \"y\": np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0]),\n    \"sigma\": np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0]),\n}\n\n\ndef model(J, sigma, y=None):\n    mu = numpyro.sample(\"mu\", dist.Normal(0, 5))\n    tau = numpyro.sample(\"tau\", dist.HalfCauchy(5))\n    # use non-centered reparameterization\n    theta = numpyro.sample(\n        \"theta\",\n        dist.TransformedDistribution(\n            dist.Normal(np.zeros(J), 1), AffineTransform(mu, tau)\n        ),\n    )\n    numpyro.sample(\"y\", dist.Normal(theta, sigma), obs=y)\n\n\nkernel = NUTS(model)\nmcmc = MCMC(\n    kernel, num_warmup=500, num_samples=500, num_chains=4, chain_method=\"parallel\"\n)\nmcmc.run(PRNGKey(0), **eight_school_data, extra_fields=[\"num_steps\", \"energy\"])\nposterior_samples = mcmc.get_samples()\nposterior_predictive = Predictive(model, posterior_samples)(\n    PRNGKey(1), eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\nprior = Predictive(model, num_samples=500)(\n    PRNGKey(2), eight_school_data[\"J\"], eight_school_data[\"sigma\"]\n)\n\nnumpyro_data = az.from_numpyro(\n    mcmc,\n    prior=prior,\n    posterior_predictive=posterior_predictive,\n    coords={\"school\": np.arange(eight_school_data[\"J\"])},\n    dims={\"theta\": [\"school\"]},\n)\nnumpyro_data",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 13,
          "end_lineno": 13,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "zeros"
          ],
          "code_str": "np.zeros",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.zeros"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 47,
          "end_lineno": 47,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 43,
          "end_lineno": 43,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "from-numpyro",
        "headings": [
          "Creating InferenceData",
          "From NumPyro"
        ]
      },
      "doc_lineno": 330002
    },
    {
      "source": "import pyjags",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "import-package",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Import Package"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "eight_school_prior_model_code = ''' \nmodel {\n    mu ~ dnorm(0.0, 1.0/25)\n    tau ~ dt(0.0, 1.0/25, 1.0) T(0, )\n    for (j in 1:J) {\n        theta_tilde[j] ~ dnorm(0.0, 1.0)\n    }\n}\n'''",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "prior-model",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "JAGS Model Code",
          "Prior Model"
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "eight_school_posterior_model_code = ''' \nmodel {\n    mu ~ dnorm(0.0, 1.0/25)\n    tau ~ dt(0.0, 1.0/25, 1.0) T(0, )\n    for (j in 1:J) {\n        theta_tilde[j] ~ dnorm(0.0, 1.0)\n        y[j] ~ dnorm(mu + tau * theta_tilde[j], 1.0/(sigma[j]^2))\n        log_like[j] = logdensity.norm(y[j], mu + tau * theta_tilde[j], 1.0/(sigma[j]^2))\n    }\n}\n'''",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "posterior-model",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "JAGS Model Code",
          "Posterior Model"
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "parameters = ['mu', 'tau', 'theta_tilde']\nvariables = parameters + ['log_like']",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "posterior-model",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "JAGS Model Code",
          "Posterior Model"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "jags_prior_model = pyjags.Model(\n    code=eight_school_prior_model_code, \n    data={\"J\": 8}, \n    chains=4, \n    threads=4,\n    chains_per_thread=1\n)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "id2",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Construct JAGS Model and Run Adaptation Steps",
          "Prior Model"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "jags_posterior_model = pyjags.Model(\n    code=eight_school_posterior_model_code, \n    data=eight_school_data, \n    chains=4, \n    threads=4,\n    chains_per_thread=1\n)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "id3",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Construct JAGS Model and Run Adaptation Steps",
          "Posterior Model"
        ]
      },
      "doc_lineno": 470002
    },
    {
      "source": "jags_prior_samples = jags_prior_model.sample(5000 + 1000, vars=parameters)\njags_posterior_samples = jags_posterior_model.sample(5000 + 1000, vars=variables)",
      "names": [],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "draw-1000-burn-in-samples-and-5000-actual-samples-per-chain",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Draw 1000 Burn-In Samples and 5000 Actual Samples per Chain"
        ]
      },
      "doc_lineno": 490002
    },
    {
      "source": "pyjags_data = az.from_pyjags(\n    posterior=jags_posterior_samples, \n    prior=jags_prior_samples, \n    log_likelihood={'y': 'log_like'}, \n    save_warmup=True, \n    warmup_iterations=1000\n)\npyjags_data",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pyjags"
          ],
          "code_str": "az.from_pyjags",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pyjags"
        }
      ],
      "example": {
        "document": "getting_started/CreatingInferenceData",
        "ref_id": "convert-pyjags-samples-dictionary-to-arviz-inference-data-object",
        "headings": [
          "Creating InferenceData",
          "From PyJAGS",
          "Convert PyJAGS Samples Dictionary to ArviZ Inference Data Object"
        ]
      },
      "doc_lineno": 510002
    }
  ],
  "getting_started/Installation": [],
  "getting_started/Introduction": [
    {
      "source": "import arviz as az\nimport numpy as np",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-quickstart",
        "headings": [
          "ArviZ Quickstart"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# ArviZ ships with style sheets!\naz.style.use(\"arviz-darkgrid\")",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-style-sheets",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ style sheets"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "az.plot_posterior(np.random.randn(100_000));",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "get-started-with-plotting",
        "headings": [
          "ArviZ Quickstart",
          "Get started with plotting"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "size = (10, 50)\naz.plot_forest(\n    {\n        \"normal\": np.random.randn(*size),\n        \"gumbel\": np.random.gumbel(size=size),\n        \"student t\": np.random.standard_t(df=6, size=size),\n        \"exponential\": np.random.exponential(size=size),\n    }\n);",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "gumbel"
          ],
          "code_str": "np.random.gumbel",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.gumbel"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "standard_t"
          ],
          "code_str": "np.random.standard_t",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.random.standard_t"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "exponential"
          ],
          "code_str": "np.random.exponential",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.exponential"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "get-started-with-plotting",
        "headings": [
          "ArviZ Quickstart",
          "Get started with plotting"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "az.rcParams['stats.hdi_prob'] = 0.90",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "import pymc3 as pm\n\nJ = 8\ny = np.array([28.0, 8.0, -3.0, 7.0, -1.0, 1.0, 18.0, 12.0])\nsigma = np.array([15.0, 10.0, 16.0, 11.0, 9.0, 11.0, 10.0, 18.0])\nschools = np.array(\n    [\n        \"Choate\",\n        \"Deerfield\",\n        \"Phillips Andover\",\n        \"Phillips Exeter\",\n        \"Hotchkiss\",\n        \"Lawrenceville\",\n        \"St. Paul's\",\n        \"Mt. Hermon\",\n    ]\n)",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.array"
        },
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "with pm.Model() as centered_eight:\n    mu = pm.Normal(\"mu\", mu=0, sd=5)\n    tau = pm.HalfCauchy(\"tau\", beta=5)\n    theta = pm.Normal(\"theta\", mu=mu, sd=tau, shape=J)\n    obs = pm.Normal(\"obs\", mu=theta, sd=sigma, observed=y)\n\n    # This pattern is useful in PyMC3\n    prior = pm.sample_prior_predictive()\n    centered_eight_trace = pm.sample(return_inferencedata=False)\n    posterior_predictive = pm.sample_posterior_predictive(centered_eight_trace)",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "az.plot_autocorr(centered_eight_trace, var_names=[\"mu\", \"tau\"]);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_autocorr"
          ],
          "code_str": "az.plot_autocorr",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_autocorr"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "arviz-rcparams",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "data = az.from_pymc3(\n    trace=centered_eight_trace,\n    prior=prior,\n    posterior_predictive=posterior_predictive,\n    model=centered_eight,\n    coords={\"school\": schools},\n    dims={\"theta\": [\"school\"], \"obs\": [\"school\"]},\n)\ndata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "convert-to-inferencedata",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams",
          "Convert to InferenceData"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "az.plot_trace(data,compact=False);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "convert-to-inferencedata",
        "headings": [
          "ArviZ Quickstart",
          "ArviZ rcParams",
          "Convert to InferenceData"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "import nest_asyncio\nnest_asyncio.apply()",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "import stan  # pystan version 3.4.0\n\n\nschools_code = \"\"\"\ndata {\n  int<lower=0> J;\n  array[J] real y;\n  array[J] real<lower=0> sigma;\n}\n\nparameters {\n  real mu;\n  real<lower=0> tau;\n  array[J] real theta;\n}\n\nmodel {\n  mu ~ normal(0, 5);\n  tau ~ cauchy(0, 5);\n  theta ~ normal(mu, tau);\n  y ~ normal(theta, sigma);\n}\ngenerated quantities {\n    vector[J] log_lik;\n    vector[J] y_hat;\n    for (j in 1:J) {\n        log_lik[j] = normal_lpdf(y[j] | theta[j], sigma[j]);\n        y_hat[j] = normal_rng(theta[j], sigma[j]);\n    }\n}\n\"\"\"\n\nschools_dat = {\n    \"J\": 8,\n    \"y\": [28, 8, -3, 7, -1, 1, 18, 12],\n    \"sigma\": [15, 10, 16, 11, 9, 11, 10, 18],\n}\n\nposterior = stan.build(schools_code, data=schools_dat, random_seed=1)\nfit = posterior.sample(num_chains=4, num_samples=1000)",
      "names": [],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "az.plot_density(fit, var_names=[\"mu\", \"tau\"]);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "data = az.from_pystan(\n    posterior=fit,\n    posterior_predictive=\"y_hat\",\n    observed_data=[\"y\"],\n    log_likelihood={\"y\": \"log_lik\"},\n    coords={\"school\": schools},\n    dims={\n        \"theta\": [\"school\"],\n        \"y\": [\"school\"],\n        \"log_lik\": [\"school\"],\n        \"y_hat\": [\"school\"],\n        \"theta_tilde\": [\"school\"],\n    },\n)\ndata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "az.plot_pair(\n    data,\n    coords={\"school\": [\"Choate\", \"Deerfield\", \"Phillips Andover\"]},\n    divergences=True,\n);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "getting_started/Introduction",
        "ref_id": "plotting-with-pystan-objects",
        "headings": [
          "ArviZ Quickstart",
          "Plotting with PyStan objects"
        ]
      },
      "doc_lineno": 260002
    }
  ],
  "getting_started/WorkingWithInferenceData": [
    {
      "source": "import arviz as az\nimport numpy as np\nimport xarray as xr\nxr.set_options(display_expand_data=False, display_expand_attrs=False);",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "working-with-inferencedata",
        "headings": [
          "Working with InferenceData"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "idata = az.load_arviz_data(\"centered_eight\")\nidata",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "working-with-inferencedata",
        "headings": [
          "Working with InferenceData"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "post = idata.posterior\npost",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-the-dataset-corresponding-to-a-single-group",
        "headings": [
          "Working with InferenceData",
          "Get the dataset corresponding to a single group"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "post[\"log_tau\"] = np.log(post[\"tau\"])\nidata.posterior",
      "names": [
        {
          "import_components": [
            "numpy",
            "log"
          ],
          "code_str": "np.log",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.log"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "add-a-new-variable",
        "headings": [
          "Working with InferenceData",
          "Add a new variable"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "stacked = az.extract_dataset(idata)\nstacked",
      "names": [
        {
          "import_components": [
            "arviz",
            "extract_dataset"
          ],
          "code_str": "az.extract_dataset",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.extract_dataset"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "combine-chains-and-draws",
        "headings": [
          "Working with InferenceData",
          "Combine chains and draws"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "az.extract_dataset(idata, num_samples=100)",
      "names": [
        {
          "import_components": [
            "arviz",
            "extract_dataset"
          ],
          "code_str": "az.extract_dataset",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.extract_dataset"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-a-random-subset-of-the-samples",
        "headings": [
          "Working with InferenceData",
          "Get a random subset of the samples"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "stacked.mu.values",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "obtain-a-numpy-array-for-a-given-parameter",
        "headings": [
          "Working with InferenceData",
          "Obtain a NumPy array for a given parameter"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "len(idata.observed_data.school)",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-the-dimension-lengths",
        "headings": [
          "Working with InferenceData",
          "Get the dimension lengths"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "idata.observed_data.school",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-coordinate-values",
        "headings": [
          "Working with InferenceData",
          "Get coordinate values"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "idata.sel(chain=[0, 2])",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "get-a-subset-of-chains",
        "headings": [
          "Working with InferenceData",
          "Get a subset of chains"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "idata.sel(draw=slice(100, None))",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "remove-the-first-n-draws-burn-in",
        "headings": [
          "Working with InferenceData",
          "Remove the first n draws (burn-in)"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "idata.sel(draw=slice(100, None), groups=\"posterior\")",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "remove-the-first-n-draws-burn-in",
        "headings": [
          "Working with InferenceData",
          "Remove the first n draws (burn-in)"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "post.mean()",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-posterior-mean-values-along-draw-and-chain-dimensions",
        "headings": [
          "Working with InferenceData",
          "Compute posterior mean values along draw and chain dimensions"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "post.mean(dim=['chain', 'draw'])",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-posterior-mean-values-along-draw-and-chain-dimensions",
        "headings": [
          "Working with InferenceData",
          "Compute posterior mean values along draw and chain dimensions"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "post[\"mlogtau\"] = post[\"log_tau\"].rolling({'draw': 50}).mean()",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-and-store-posterior-pushforward-quantities",
        "headings": [
          "Working with InferenceData",
          "Compute and store posterior pushforward quantities"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "post['theta_school_diff'] = post.theta - post.theta.rename(school=\"school_bis\")",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-and-store-posterior-pushforward-quantities",
        "headings": [
          "Working with InferenceData",
          "Compute and store posterior pushforward quantities"
        ]
      },
      "doc_lineno": 360002
    },
    {
      "source": "theta_school_diff = theta[:, :, :, None] - theta[:, :, None, :]\n",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-and-store-posterior-pushforward-quantities",
        "headings": [
          "Working with InferenceData",
          "Compute and store posterior pushforward quantities"
        ]
      },
      "doc_lineno": 370007
    },
    {
      "source": "post",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "compute-and-store-posterior-pushforward-quantities",
        "headings": [
          "Working with InferenceData",
          "Compute and store posterior pushforward quantities"
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "post['theta_school_diff'].sel(school=\"Choate\", school_bis=\"Deerfield\")",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "advanced-subsetting",
        "headings": [
          "Working with InferenceData",
          "Advanced subsetting"
        ]
      },
      "doc_lineno": 400002
    },
    {
      "source": "school_idx = xr.DataArray([\"Choate\", \"Hotchkiss\", \"Mt. Hermon\"], dims=[\"pairwise_school_diff\"])\nschool_bis_idx = xr.DataArray([\"Deerfield\", \"Choate\", \"Lawrenceville\"], dims=[\"pairwise_school_diff\"])\npost['theta_school_diff'].sel(school=school_idx, school_bis=school_bis_idx)",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "advanced-subsetting",
        "headings": [
          "Working with InferenceData",
          "Advanced subsetting"
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "post['theta_school_diff'].sel(\n    school=[\"Choate\", \"Hotchkiss\", \"Mt. Hermon\"], \n    school_bis=[\"Deerfield\", \"Choate\", \"Lawrenceville\"]\n)",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "advanced-subsetting",
        "headings": [
          "Working with InferenceData",
          "Advanced subsetting"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "idata_rerun = idata.sel(chain=[0, 1]).copy().assign_coords(coords={\"chain\":[4,5]},groups=\"posterior_groups\")",
      "names": [],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "add-new-chains-using-concat",
        "headings": [
          "Working with InferenceData",
          "Add new chains using concat"
        ]
      },
      "doc_lineno": 470002
    },
    {
      "source": "idata_complete = az.concat(idata, idata_rerun, dim=\"chain\")\nidata_complete.posterior.dims[\"chain\"]",
      "names": [
        {
          "import_components": [
            "arviz",
            "concat"
          ],
          "code_str": "az.concat",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.concat"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "add-new-chains-using-concat",
        "headings": [
          "Working with InferenceData",
          "Add new chains using concat"
        ]
      },
      "doc_lineno": 490002
    },
    {
      "source": "rng = np.random.default_rng(3)\nidata.add_groups(\n    {\"predictions\": {\"obs\": rng.normal(size=(4, 500, 2))}}, \n    dims={\"obs\": [\"new_school\"]}, \n    coords={\"new_school\": [\"Essex College\", \"Moordale\"]}\n)\nidata",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "np.random.default_rng",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        }
      ],
      "example": {
        "document": "getting_started/WorkingWithInferenceData",
        "ref_id": "add-groups-to-inferencedata-objects",
        "headings": [
          "Working with InferenceData",
          "Add groups to InferenceData objects"
        ]
      },
      "doc_lineno": 520002
    }
  ],
  "getting_started/XarrayforArviZ": [
    {
      "source": "# Load the centered eight schools model\nimport arviz as az\n\ndata = az.load_arviz_data(\"centered_eight\")\ndata",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "an-introduction-to-each",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "An introduction to each"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "# Get the posterior dataset\nposterior = data.posterior\nposterior",
      "names": [],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "an-introduction-to-each",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "An introduction to each"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "# Get the observed xarray\nobserved_data = data.observed_data\nobserved_data",
      "names": [],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "an-introduction-to-each",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "An introduction to each"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "data = az.load_arviz_data(\"centered_eight\")",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "netcdf",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "NetCDF"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "data.to_netcdf(\"eight_schools_model.nc\")",
      "names": [],
      "example": {
        "document": "getting_started/XarrayforArviZ",
        "ref_id": "netcdf",
        "headings": [
          "Introduction to xarray, InferenceData, and netCDF for ArviZ",
          "NetCDF"
        ]
      },
      "doc_lineno": 130002
    }
  ],
  "getting_started/index": [],
  "index": [],
  "schema/PyMC3_schema_example": [
    {
      "source": "import arviz as az\nimport pymc3 as pm\nimport pandas as pd\nimport numpy as np\nimport xarray\nxarray.set_options(display_style=\"html\");",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "#read data\ndata = pd.read_csv(\"linear_regression_data.csv\", index_col=0)\ntime = data.time.values\nslack_comments = data.comments.values\ngithub_commits = data.commits.values\nnames = data.index.values\nN = len(names)\ndata",
      "names": [
        {
          "import_components": [
            "pandas",
            "read_csv"
          ],
          "code_str": "pd.read_csv",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pandas.read_csv"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# data for out of sample predictions\ncandidate_devs = [\"Francis\", \"Gerard\"]\ncandidate_devs_time = np.array([3.6, 5.1])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "dims={\n    \"slack_comments\": [\"developer\"],\n    \"github_commits\": [\"developer\"],\n    \"time_since_joined\": [\"developer\"],\n}\nwith pm.Model() as model:\n    time_since_joined = pm.Data(\"time_since_joined\", time)\n    \n    b_sigma = pm.HalfNormal('b_sigma', sd=300)\n    c_sigma = pm.HalfNormal('c_sigma', sd=6)\n    b0 = pm.Normal(\"b0\", mu=0, sd=200)\n    b1 = pm.Normal(\"b1\", mu=0, sd=200)\n    c0 = pm.Normal(\"c0\", mu=0, sd=10)\n    c1 = pm.Normal(\"c1\", mu=0, sd=10)\n    \n    pm.Normal(\"slack_comments\", mu=b0 + b1 * time_since_joined, sigma=b_sigma, observed=slack_comments)\n    pm.Normal(\"github_commits\", mu=c0 + c1 * time_since_joined, sigma=c_sigma, observed=github_commits)\n    \n    trace = pm.sample(400, chains=4)\n    posterior_predictive = pm.sample_posterior_predictive(trace)\n    prior = pm.sample_prior_predictive(150)\n    idata_pymc3 = az.from_pymc3(\n        trace,\n        prior=prior,\n        posterior_predictive=posterior_predictive,\n        coords={\"developer\": names},\n        dims=dims\n    )",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "dims_pred={\n    \"slack_comments\": [\"candidate developer\"],\n    \"github_commits\": [\"candidate developer\"],\n    \"time_since_joined\": [\"candidate developer\"],\n}\nwith model:\n    pm.set_data({\"time_since_joined\": candidate_devs_time})\n    predictions = pm.sample_posterior_predictive(trace)\n    az.from_pymc3_predictions(\n        predictions, \n        idata_orig=idata_pymc3, \n        inplace=True,\n        coords={\"candidate developer\": candidate_devs},\n        dims=dims_pred,\n    )",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3_predictions"
          ],
          "code_str": "az.from_pymc3_predictions",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.from_pymc3_predictions"
        }
      ],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "idata_pymc3",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "idata_pymc3.posterior",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "idata_pymc3.sample_stats",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "idata_pymc3.log_likelihood",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "idata_pymc3.posterior_predictive",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "idata_pymc3.observed_data",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "idata_pymc3.constant_data",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "idata_pymc3.prior",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "idata_pymc3.predictions",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "idata_pymc3.predictions_constant_data",
      "names": [],
      "example": {
        "document": "schema/PyMC3_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pymc3",
        "headings": [
          "Example of InferenceData schema in PyMC3"
        ]
      },
      "doc_lineno": 170002
    }
  ],
  "schema/PyStan_schema_example": [
    {
      "source": "import arviz as az\nimport pystan\nimport pandas as pd\nimport numpy as np\nimport xarray\nxarray.set_options(display_style=\"html\");",
      "names": [
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 20002
    },
    {
      "source": "#read data\ndata = pd.read_csv(\"linear_regression_data.csv\", index_col=0)\ntime_since_joined = data.time.values\nslack_comments = data.comments.values\ngithub_commits = data.commits.values\nnames = data.index.values\nN = len(names)\ndata",
      "names": [
        {
          "import_components": [
            "pandas",
            "read_csv"
          ],
          "code_str": "pd.read_csv",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "pandas.read_csv"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# data for out of sample predictions\ncandidate_devs = [\"Francis\", \"Gerard\"]\ncandidate_devs_time = np.array([3.6, 5.1])\nN_pred = len(candidate_devs)",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "linreg_prior_code = \"\"\"\ndata {\n  int<lower=0> N;\n  real time_since_joined[N];\n}\n\ngenerated quantities {\n    real b0;\n    real b1;\n    real log_b_sigma;\n    real<lower=0> b_sigma;\n    \n    real c0;\n    real c1;\n    real log_c_sigma;\n    real<lower=0> c_sigma;\n    \n    vector[N] slack_comments_hat;\n    vector[N] github_commits_hat;\n    \n    b0 = normal_rng(0,200);\n    b1 = normal_rng(0,200);\n    b_sigma = abs(normal_rng(0,300));\n    log_b_sigma = log(b_sigma);\n    \n    c0 = normal_rng(0,10);\n    c1 = normal_rng(0,10);\n    c_sigma = fabs(normal_rng(0,6));\n    log_c_sigma = log(b_sigma);\n    \n    for (n in 1:N) {\n        slack_comments_hat[n] = normal_rng(b0 + b1 * time_since_joined[n], b_sigma);\n        github_commits_hat[n] = normal_rng(c0 + c1 * time_since_joined[n], c_sigma);\n    }\n}\n\"\"\"\nsm_prior = pystan.StanModel(model_code=linreg_prior_code)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "linreg_prior_data_dict = {\"N\": N, \"time_since_joined\": time_since_joined}\nprior = sm_prior.sampling(data=linreg_prior_data_dict, iter=150, chains=1, algorithm='Fixed_param', warmup=0)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "linreg_code = \"\"\"\ndata {\n  int<lower=0> N;\n  vector<lower=0>[N] time_since_joined;\n  vector<lower=0>[N] slack_comments;\n  vector<lower=0>[N] github_commits;\n  \n  \n  // out of sample prediction\n  int<lower=0> N_pred;\n  vector<lower=0>[N_pred] time_since_joined_pred;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real log_b_sigma;\n  \n  real c0;\n  real c1;\n  real log_c_sigma;\n}\n\ntransformed parameters {\n  real<lower=0> b_sigma = exp(log_b_sigma);\n  real<lower=0> c_sigma = exp(log_c_sigma);\n}\n\nmodel {\n  b0 ~ normal(0,200);\n  b1 ~ normal(0,200);\n  b_sigma ~ normal(0,300);\n  slack_comments ~ normal(b0 + b1 * time_since_joined, b_sigma);\n  github_commits ~ normal(c0 + c1 * time_since_joined, c_sigma);\n  \n}\n\ngenerated quantities {\n    // elementwise log likelihood\n    vector[N] log_likelihood_slack_comments;\n    vector[N] log_likelihood_github_commits;\n    \n    // posterior predictive\n    vector[N] slack_comments_hat;\n    vector[N] github_commits_hat;\n    \n    // out of sample prediction\n    vector[N_pred] slack_comments_pred;\n    vector[N_pred] github_commits_pred;\n    \n    // posterior predictive\n    for (n in 1:N) {\n        log_likelihood_slack_comments[n] = normal_lpdf(slack_comments[n] | b0 + b1 * time_since_joined[n], b_sigma);\n        slack_comments_hat[n] = normal_rng(b0 + b1 * time_since_joined[n], b_sigma);\n        \n        log_likelihood_github_commits[n] = normal_lpdf(github_commits[n] | c0 + c1 * time_since_joined[n], c_sigma);\n        github_commits_hat[n] = normal_rng(c0 + c1 * time_since_joined[n], c_sigma);\n    }\n    \n    // out of sample prediction\n    for (n in 1:N_pred) {\n        slack_comments_pred[n] = normal_rng(b0 + b1 * time_since_joined_pred[n], b_sigma);\n        github_commits_pred[n] = normal_rng(c0 + c1 * time_since_joined_pred[n], c_sigma);\n    }\n}\n\"\"\"\nsm = pystan.StanModel(model_code=linreg_code)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "linreg_data_dict = {\"N\": N, \"slack_comments\": slack_comments, \"github_commits\": github_commits, \"time_since_joined\": time_since_joined, \"N_pred\" : N_pred, \"time_since_joined_pred\" : candidate_devs_time}\nposterior = sm.sampling(data=linreg_data_dict, iter=200, chains=4)",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "idata_stan = az.from_pystan(\n    posterior=posterior,\n    prior=prior,\n    posterior_predictive=[\"slack_comments_hat\",\"github_commits_hat\"],\n    prior_predictive=[\"slack_comments_hat\",\"github_commits_hat\"],\n    observed_data=[\"slack_comments\",\"github_commits\"],\n    constant_data=[\"time_since_joined\"],\n    log_likelihood={\n        \"slack_comments\": \"log_likelihood_slack_comments\",\n        \"github_commits\": \"log_likelihood_github_commits\"\n    },\n    predictions=[\"slack_comments_pred\", \"github_commits_pred\"],\n    predictions_constant_data=[\"time_since_joined_pred\"],\n    coords={\"developer\": names, \"candidate developer\" : candidate_devs},\n    dims={\n        \"slack_comments\": [\"developer\"],\n        \"github_commits\" : [\"developer\"],\n        \"slack_comments_hat\": [\"developer\"],\n        \"github_commits_hat\": [\"developer\"],\n        \"time_since_joined\": [\"developer\"],\n        \"slack_comments_pred\" : [\"candidate developer\"],\n        \"github_commits_pred\" : [\"candidate developer\"],\n        \"time_since_joined_pred\" : [\"candidate developer\"],\n    }\n)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "idata_stan",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "idata_stan.posterior",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "idata_stan.sample_stats",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "idata_stan.log_likelihood",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "idata_stan.posterior_predictive",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "idata_stan.observed_data",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "idata_stan.constant_data",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "idata_stan.prior",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "idata_stan.sample_stats_prior",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "idata_stan.prior_predictive",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "idata_stan.predictions",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "idata_stan.predictions_constant_data",
      "names": [],
      "example": {
        "document": "schema/PyStan_schema_example",
        "ref_id": "example-of-inferencedata-schema-in-pystan",
        "headings": [
          "Example of InferenceData schema in PyStan"
        ]
      },
      "doc_lineno": 220002
    }
  ],
  "schema/schema": [],
  "user_guide/Dask": [
    {
      "source": "import arviz as az\nimport numpy as np\nimport timeit\nimport dask\n\nfrom arviz.utils import conditional_jit, Dask",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "utils",
            "Dask"
          ],
          "code_str": "Dask",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "arviz.utils.Dask"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "dask-overview",
        "headings": [
          "Dask for ArviZ",
          "Dask overview"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# optional imports\nfrom dask.distributed import Client\nfrom dask.diagnostics import ResourceProfiler\n\nfrom bokeh.resources import INLINE\nimport bokeh.io\nbokeh.io.output_notebook(INLINE)\n\n%reload_ext memory_profiler",
      "names": [
        {
          "import_components": [
            "dask",
            "diagnostics",
            "ResourceProfiler"
          ],
          "code_str": "ResourceProfiler",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "dask.diagnostics.ResourceProfiler"
        },
        {
          "import_components": [
            "bokeh",
            "resources"
          ],
          "code_str": "bokeh.resources",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_from",
          "resolved_location": "bokeh.resources"
        },
        {
          "import_components": [
            "bokeh",
            "resources",
            "INLINE"
          ],
          "code_str": "INLINE",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "bokeh.resources.INLINE"
        },
        {
          "import_components": [
            "bokeh",
            "io"
          ],
          "code_str": "bokeh.io",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "bokeh.io"
        },
        {
          "import_components": [
            "bokeh",
            "resources",
            "INLINE"
          ],
          "code_str": "INLINE",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "bokeh.resources.INLINE"
        },
        {
          "import_components": [
            "bokeh",
            "io",
            "output_notebook"
          ],
          "code_str": "bokeh.io.output_notebook",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "bokeh.io.output_notebook"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "dask-overview",
        "headings": [
          "Dask for ArviZ",
          "Dask overview"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "client = Client(threads_per_worker=4, n_workers=1, memory_limit=\"1.2GB\")\nclient",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "dask-overview",
        "headings": [
          "Dask for ArviZ",
          "Dask overview"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "array_size = 250_000_000",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "%%memit \ndata = np.random.randn(array_size)\nnp.var(data, ddof=1)\ndel data",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "%memit data = dask.array.random.normal(size=array_size, chunks=\"auto\")\ndata",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "var = dask.array.var(data, ddof=1)\nvar.visualize()",
      "names": [
        {
          "import_components": [
            "dask",
            "array",
            "var"
          ],
          "code_str": "dask.array.var",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "dask.array.var"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "with ResourceProfiler(dt=0.25) as rprof:\n    var.compute()\n\nrprof.visualize();",
      "names": [
        {
          "import_components": [
            "dask",
            "diagnostics",
            "ResourceProfiler"
          ],
          "code_str": "ResourceProfiler",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "dask.diagnostics.ResourceProfiler"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "del data",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "variance-example",
        "headings": [
          "Dask for ArviZ",
          "Dask overview",
          "Variance example"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "%memit daskdata = dask.array.random.random((10, 1000, 10000), chunks=(10, 1000, 625))\ndaskdata",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "from-dictionary-using-dask-array",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Creating Dask-backed InferenceData objects",
          "From dictionary using dask.array"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "daskdata.visualize() # Each chunk will follow lazy evaluation ",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "from-dictionary-using-dask-array",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Creating Dask-backed InferenceData objects",
          "From dictionary using dask.array"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "datadict = {\"x\": daskdata}\n%memit idata_dask = az.from_dict(posterior=datadict, dims={\"x\": [\"dim_1\"]})\nidata_dask",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "from-dictionary-using-dask-array",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Creating Dask-backed InferenceData objects",
          "From dictionary using dask.array"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "%memit npdata = np.random.rand(10, 1000, 10000)\ndatadict = {\"x\": npdata}\nidata_numpy = az.from_dict(posterior=datadict, dims={\"x\": [\"dim_1\"]})\nidata_numpy",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "executing-arviz-functions-with-dask",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "%%time\n%%memit\n\naz.ess(idata_numpy)",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "Dask.enable_dask(dask_kwargs={\"dask\": \"parallelized\", \"output_dtypes\": [float]})",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      },
      "doc_lineno": 310002
    },
    {
      "source": "%%time\n%%memit\n\ness = az.ess(idata_dask)\n\nwith ResourceProfiler(dt=0.25) as rprof:\n    ess.compute()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      },
      "doc_lineno": 320002
    },
    {
      "source": "ess.data_vars[\"x\"].data.visualize()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      },
      "doc_lineno": 340002
    },
    {
      "source": "rprof.visualize()\nDask.disable_dask()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-ess",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.ess"
        ]
      },
      "doc_lineno": 350002
    },
    {
      "source": "%%time\n%%memit\n\naz.rhat(idata_numpy)",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      },
      "doc_lineno": 380002
    },
    {
      "source": "Dask.enable_dask(dask_kwargs={\"dask\": \"parallelized\", \"output_dtypes\": [int]})",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      },
      "doc_lineno": 390002
    },
    {
      "source": "%%time\n%%memit\n\nrhat =  az.rhat(idata_dask, dask_kwargs={\"output_dtypes\": [float]})\n\nwith ResourceProfiler(dt=0.25) as rprof:\n    rhat.compute()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      },
      "doc_lineno": 410002
    },
    {
      "source": "rprof.visualize()\nDask.disable_dask()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-rhat",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.rhat "
        ]
      },
      "doc_lineno": 420002
    },
    {
      "source": "%%time\n%%memit\n\naz.hdi(idata_numpy, hdi_prob=.68)",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      },
      "doc_lineno": 440002
    },
    {
      "source": "Dask.enable_dask(dask_kwargs={\"dask\": \"parallelized\", \"output_dtypes\": [float]})",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      },
      "doc_lineno": 450002
    },
    {
      "source": "%%time\n%%memit\n\nhdi = az.hdi(idata_dask, hdi_prob=0.68, dask_gufunc_kwargs={\"output_sizes\": {\"hdi\": 2}})\n\nwith ResourceProfiler(dt=0.25) as rprof:\n    hdi.compute()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      },
      "doc_lineno": 470002
    },
    {
      "source": "rprof.visualize()\nDask.disable_dask()\nclient.close()",
      "names": [],
      "example": {
        "document": "user_guide/Dask",
        "ref_id": "arviz-hdi",
        "headings": [
          "Dask for ArviZ",
          "ArviZ-Dask integration",
          "Executing ArviZ functions with Dask",
          "arviz.hdi"
        ]
      },
      "doc_lineno": 480002
    }
  ],
  "user_guide/Numba": [
    {
      "source": "import arviz as az\nimport numpy as np\nimport timeit\n\nfrom arviz.utils import conditional_jit, Numba\nfrom arviz.stats.diagnostics import ks_summary",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "utils",
            "Numba"
          ],
          "code_str": "Numba",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "arviz.utils.Numba"
        }
      ],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "data = np.random.randn(1000000)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        }
      ],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "def variance(data, ddof=0):  # Method to calculate variance without using numba\n    a_a, b_b = 0, 0\n    for i in data:\n        a_a = a_a + i\n        b_b = b_b + i * i\n    var = b_b / (len(data)) - ((a_a / (len(data))) ** 2)\n    var = var * (len(data) / (len(data) - ddof))\n    return var",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "%timeit variance(data, ddof=1)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "@conditional_jit\ndef variance_jit(data, ddof=0):  # Calculating variance with numba\n    a_a, b_b = 0, 0\n    for i in data:\n        a_a = a_a + i\n        b_b = b_b + i * i\n    var = b_b / (len(data)) - ((a_a / (len(data))) ** 2)\n    var = var * (len(data) / (len(data) - ddof))\n    return var",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "%timeit variance_jit(data, ddof=1)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "%timeit np.var(data, ddof=1)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "a-simple-example-to-display-the-effectiveness-of-numba",
        "headings": [
          "Numba -  an overview",
          "A simple example to display the effectiveness of Numba"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "summary_data = np.random.randn(1000, 100, 10)\nschool = az.load_arviz_data(\"centered_eight\").posterior[\"mu\"].values",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "randn"
          ],
          "code_str": "np.random.randn",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.randn"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-within-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba within ArviZ"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "Numba.disable_numba()\nNumba.numba_flag",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-within-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba within ArviZ"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "%timeit ks_summary(summary_data)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-within-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba within ArviZ"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "%timeit ks_summary(school)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-within-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba within ArviZ"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "Numba.enable_numba()\nNumba.numba_flag",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-within-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba within ArviZ"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "%timeit ks_summary(summary_data)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-within-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba within ArviZ"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "%timeit ks_summary(school)",
      "names": [],
      "example": {
        "document": "user_guide/Numba",
        "ref_id": "numba-within-arviz",
        "headings": [
          "Numba -  an overview",
          "Numba within ArviZ"
        ]
      },
      "doc_lineno": 210002
    }
  ],
  "user_guide/computation": [],
  "user_guide/data_structures": [],
  "user_guide/index": [],
  "user_guide/label_guide": [
    {
      "source": "In [1]: import arviz as az\n   ...: schools = az.load_arviz_data(\"centered_eight\")\n   ...: az.summary(schools)\n   ...: \nOut[1]: \n                          mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\nmu                       4.093  3.372  -2.118  ...     250.0     643.0   1.03\ntheta[Choate]            6.026  5.782  -3.707  ...     348.0     743.0   1.02\ntheta[Deerfield]         4.724  4.736  -4.039  ...     471.0    1018.0   1.02\ntheta[Phillips Andover]  3.576  5.559  -6.779  ...     463.0     674.0   1.01\ntheta[Phillips Exeter]   4.478  4.939  -5.528  ...     503.0     666.0   1.01\ntheta[Hotchkiss]         3.064  4.642  -5.972  ...     380.0     833.0   1.02\ntheta[Lawrenceville]     3.821  4.979  -5.507  ...     516.0    1104.0   1.02\ntheta[St. Paul's]        6.250  5.436  -3.412  ...     402.0    1026.0   1.02\ntheta[Mt. Hermon]        4.544  5.521  -5.665  ...     449.0    1084.0   1.01\ntau                      4.089  3.001   0.569  ...      79.0      54.0   1.07\n\n[10 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "example-default-labelling",
        "headings": [
          "Label guide",
          "Basic labelling",
          "Example: Default labelling"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [2]: az.plot_trace(schools, var_names=[\"tau\", \"theta\"], coords={\"school\": [\"Choate\", \"St. Paul's\"]}, compact=False);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_trace"
          ],
          "code_str": "az.plot_trace",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_trace"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "example-label-based-indexing",
        "headings": [
          "Label guide",
          "Basic labelling",
          "Example: Label based indexing"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [3]: import arviz.labels as azl\n   ...: labeller = azl.MapLabeller(var_name_map={\"theta\": r\"$\\theta$\"})\n   ...: coords = {\"school\": [\"Deerfield\", \"Hotchkiss\", \"Lawrenceville\"]}\n   ...: \n\nIn [4]: az.plot_posterior(schools, var_names=\"theta\", coords=coords, labeller=labeller, ref_val=5);",
      "names": [
        {
          "import_components": [
            "arviz",
            "labels",
            "MapLabeller"
          ],
          "code_str": "azl.MapLabeller",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.labels.MapLabeller"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "example-using-the-labeller-argument",
        "headings": [
          "Label guide",
          "Basic labelling",
          "Example: Using the labeller argument"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [5]: var_order = [\"theta\", \"mu\", \"tau\"]",
      "names": [],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "sorting-variable-names",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Sorting variable names"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [6]: az.summary(schools, var_names=var_order)\nOut[6]: \n                          mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\ntheta[Choate]            6.026  5.782  -3.707  ...     348.0     743.0   1.02\ntheta[Deerfield]         4.724  4.736  -4.039  ...     471.0    1018.0   1.02\ntheta[Phillips Andover]  3.576  5.559  -6.779  ...     463.0     674.0   1.01\ntheta[Phillips Exeter]   4.478  4.939  -5.528  ...     503.0     666.0   1.01\ntheta[Hotchkiss]         3.064  4.642  -5.972  ...     380.0     833.0   1.02\ntheta[Lawrenceville]     3.821  4.979  -5.507  ...     516.0    1104.0   1.02\ntheta[St. Paul's]        6.250  5.436  -3.412  ...     402.0    1026.0   1.02\ntheta[Mt. Hermon]        4.544  5.521  -5.665  ...     449.0    1084.0   1.01\nmu                       4.093  3.372  -2.118  ...     250.0     643.0   1.03\ntau                      4.089  3.001   0.569  ...      79.0      54.0   1.07\n\n[10 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "sorting-variable-names",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Sorting variable names"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [7]: schools.posterior = schools.posterior[var_order]\n   ...: az.summary(schools)\n   ...: \nOut[7]: \n                          mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\ntheta[Choate]            6.026  5.782  -3.707  ...     348.0     743.0   1.02\ntheta[Deerfield]         4.724  4.736  -4.039  ...     471.0    1018.0   1.02\ntheta[Phillips Andover]  3.576  5.559  -6.779  ...     463.0     674.0   1.01\ntheta[Phillips Exeter]   4.478  4.939  -5.528  ...     503.0     666.0   1.01\ntheta[Hotchkiss]         3.064  4.642  -5.972  ...     380.0     833.0   1.02\ntheta[Lawrenceville]     3.821  4.979  -5.507  ...     516.0    1104.0   1.02\ntheta[St. Paul's]        6.250  5.436  -3.412  ...     402.0    1026.0   1.02\ntheta[Mt. Hermon]        4.544  5.521  -5.665  ...     449.0    1084.0   1.01\nmu                       4.093  3.372  -2.118  ...     250.0     643.0   1.03\ntau                      4.089  3.001   0.569  ...      79.0      54.0   1.07\n\n[10 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "sorting-variable-names",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Sorting variable names"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [8]: school_means = schools.posterior[\"theta\"].mean((\"chain\", \"draw\"))\n   ...: school_means\n   ...: \nOut[8]: \n<xarray.DataArray 'theta' (school: 8)>\narray([6.02582947, 4.72414999, 3.57636428, 4.47778158, 3.06403605,\n       3.82103202, 6.25017863, 4.54440944])\nCoordinates:\n  * school   (school) object 'Choate' 'Deerfield' ... \"St. Paul's\" 'Mt. Hermon'",
      "names": [],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "example-sorting-the-schools-by-mean",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Example: Sorting the schools by mean"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [9]: sorted_schools = schools.posterior[\"school\"].sortby(school_means)\n   ...: az.summary(schools, var_names=\"theta\", coords={\"school\": sorted_schools})\n   ...: \nOut[9]: \n                          mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\ntheta[Hotchkiss]         3.064  4.642  -5.972  ...     380.0     833.0   1.02\ntheta[Phillips Andover]  3.576  5.559  -6.779  ...     463.0     674.0   1.01\ntheta[Lawrenceville]     3.821  4.979  -5.507  ...     516.0    1104.0   1.02\ntheta[Phillips Exeter]   4.478  4.939  -5.528  ...     503.0     666.0   1.01\ntheta[Mt. Hermon]        4.544  5.521  -5.665  ...     449.0    1084.0   1.01\ntheta[Deerfield]         4.724  4.736  -4.039  ...     471.0    1018.0   1.02\ntheta[Choate]            6.026  5.782  -3.707  ...     348.0     743.0   1.02\ntheta[St. Paul's]        6.250  5.436  -3.412  ...     402.0    1026.0   1.02\n\n[8 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "example-sorting-the-schools-by-mean",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Example: Sorting the schools by mean"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [10]: schools.posterior = schools.posterior.sortby(school_means)\n   ....: az.summary(schools, var_names=\"theta\")\n   ....: \nOut[10]: \n                          mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\ntheta[Hotchkiss]         3.064  4.642  -5.972  ...     380.0     833.0   1.02\ntheta[Phillips Andover]  3.576  5.559  -6.779  ...     463.0     674.0   1.01\ntheta[Lawrenceville]     3.821  4.979  -5.507  ...     516.0    1104.0   1.02\ntheta[Phillips Exeter]   4.478  4.939  -5.528  ...     503.0     666.0   1.01\ntheta[Mt. Hermon]        4.544  5.521  -5.665  ...     449.0    1084.0   1.01\ntheta[Deerfield]         4.724  4.736  -4.039  ...     471.0    1018.0   1.02\ntheta[Choate]            6.026  5.782  -3.707  ...     348.0     743.0   1.02\ntheta[St. Paul's]        6.250  5.436  -3.412  ...     402.0    1026.0   1.02\n\n[8 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "example-sorting-the-schools-by-mean",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Example: Sorting the schools by mean"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [11]: from numpy.random import default_rng\n   ....: import pandas as pd\n   ....: rng = default_rng()\n   ....: samples = rng.normal(size=(4, 500, 2, 3, 4))\n   ....: coords = {\n   ....:     \"subject\": [\"ecoli\", \"pseudomonas\", \"clostridium\"],\n   ....:     \"date\": [\"1-3-2020\", \"2-4-2020\", \"1-5-2020\", \"1-6-2020\"],\n   ....:     \"experiment\": [1, 2]\n   ....: }\n   ....: experiments = az.from_dict(\n   ....:     posterior={\"b\": samples}, dims={\"b\": [\"experiment\", \"subject\", \"date\"]}, coords=coords\n   ....: )\n   ....: experiments.posterior\n   ....: \nOut[11]: \n<xarray.Dataset>\nDimensions:     (chain: 4, draw: 500, experiment: 2, subject: 3, date: 4)\nCoordinates:\n  * chain       (chain) int64 0 1 2 3\n  * draw        (draw) int64 0 1 2 3 4 5 6 7 ... 492 493 494 495 496 497 498 499\n  * experiment  (experiment) int64 1 2\n  * subject     (subject) <U11 'ecoli' 'pseudomonas' 'clostridium'\n  * date        (date) <U8 '1-3-2020' '2-4-2020' '1-5-2020' '1-6-2020'\nData variables:\n    b           (chain, draw, experiment, subject, date) float64 0.3669 ... -...\nAttributes:\n    created_at:     2022-05-12T23:25:47.528253\n    arviz_version:  0.13.0.dev0",
      "names": [
        {
          "import_components": [
            "numpy",
            "random"
          ],
          "code_str": "numpy.random",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "numpy.random"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "default_rng",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "pandas"
          ],
          "code_str": "pandas",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "pandas"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "default_rng",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 10,
          "end_lineno": 10,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "sorting-dimensions",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Sorting dimensions"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [12]: az.summary(experiments)\nOut[12]: \n                              mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\nb[1, ecoli, 1-3-2020]        0.031  1.008  -2.017  ...    2030.0    1922.0    1.0\nb[1, ecoli, 2-4-2020]       -0.003  1.005  -1.852  ...    1891.0    1922.0    1.0\nb[1, ecoli, 1-5-2020]       -0.026  1.020  -2.008  ...    2016.0    1810.0    1.0\nb[1, ecoli, 1-6-2020]        0.035  0.974  -1.717  ...    1936.0    1679.0    1.0\nb[1, pseudomonas, 1-3-2020] -0.049  0.977  -1.858  ...    1949.0    1915.0    1.0\nb[1, pseudomonas, 2-4-2020] -0.003  1.022  -1.945  ...    1638.0    1635.0    1.0\nb[1, pseudomonas, 1-5-2020]  0.037  1.020  -1.964  ...    1937.0    1782.0    1.0\nb[1, pseudomonas, 1-6-2020]  0.008  0.995  -1.909  ...    1998.0    1911.0    1.0\nb[1, clostridium, 1-3-2020]  0.028  1.024  -1.894  ...    2034.0    2103.0    1.0\nb[1, clostridium, 2-4-2020]  0.009  1.000  -1.756  ...    2105.0    1997.0    1.0\nb[1, clostridium, 1-5-2020] -0.014  1.001  -1.901  ...    1940.0    2106.0    1.0\nb[1, clostridium, 1-6-2020]  0.053  1.012  -1.810  ...    1900.0    1784.0    1.0\nb[2, ecoli, 1-3-2020]       -0.024  0.980  -1.887  ...    2053.0    2045.0    1.0\nb[2, ecoli, 2-4-2020]        0.010  1.001  -1.866  ...    1787.0    1903.0    1.0\nb[2, ecoli, 1-5-2020]       -0.031  0.979  -1.833  ...    1859.0    1868.0    1.0\nb[2, ecoli, 1-6-2020]        0.010  1.012  -1.833  ...    2079.0    2102.0    1.0\nb[2, pseudomonas, 1-3-2020]  0.034  0.980  -1.948  ...    1938.0    1873.0    1.0\nb[2, pseudomonas, 2-4-2020] -0.009  0.987  -1.765  ...    2062.0    2050.0    1.0\nb[2, pseudomonas, 1-5-2020]  0.008  1.007  -1.823  ...    2029.0    1914.0    1.0\nb[2, pseudomonas, 1-6-2020]  0.010  0.966  -1.886  ...    2114.0    1720.0    1.0\nb[2, clostridium, 1-3-2020]  0.003  1.012  -1.852  ...    1893.0    2012.0    1.0\nb[2, clostridium, 2-4-2020] -0.001  0.997  -1.808  ...    1654.0    1757.0    1.0\nb[2, clostridium, 1-5-2020]  0.027  0.999  -1.936  ...    1975.0    1978.0    1.0\nb[2, clostridium, 1-6-2020]  0.032  0.994  -1.848  ...    1953.0    1921.0    1.0\n\n[24 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "sorting-dimensions",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Sorting dimensions"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [13]: dim_order = (\"chain\", \"draw\", \"subject\", \"date\", \"experiment\")\n\nIn [14]: experiments = experiments.posterior.transpose(*dim_order)\n\nIn [15]: az.summary(experiments)\nOut[15]: \n                              mean     sd  hdi_3%  ...  ess_bulk  ess_tail  r_hat\nb[ecoli, 1-3-2020, 1]        0.031  1.008  -2.017  ...    2030.0    1922.0    1.0\nb[ecoli, 1-3-2020, 2]       -0.024  0.980  -1.887  ...    2053.0    2045.0    1.0\nb[ecoli, 2-4-2020, 1]       -0.003  1.005  -1.852  ...    1891.0    1922.0    1.0\nb[ecoli, 2-4-2020, 2]        0.010  1.001  -1.866  ...    1787.0    1903.0    1.0\nb[ecoli, 1-5-2020, 1]       -0.026  1.020  -2.008  ...    2016.0    1810.0    1.0\nb[ecoli, 1-5-2020, 2]       -0.031  0.979  -1.833  ...    1859.0    1868.0    1.0\nb[ecoli, 1-6-2020, 1]        0.035  0.974  -1.717  ...    1936.0    1679.0    1.0\nb[ecoli, 1-6-2020, 2]        0.010  1.012  -1.833  ...    2079.0    2102.0    1.0\nb[pseudomonas, 1-3-2020, 1] -0.049  0.977  -1.858  ...    1949.0    1915.0    1.0\nb[pseudomonas, 1-3-2020, 2]  0.034  0.980  -1.948  ...    1938.0    1873.0    1.0\nb[pseudomonas, 2-4-2020, 1] -0.003  1.022  -1.945  ...    1638.0    1635.0    1.0\nb[pseudomonas, 2-4-2020, 2] -0.009  0.987  -1.765  ...    2062.0    2050.0    1.0\nb[pseudomonas, 1-5-2020, 1]  0.037  1.020  -1.964  ...    1937.0    1782.0    1.0\nb[pseudomonas, 1-5-2020, 2]  0.008  1.007  -1.823  ...    2029.0    1914.0    1.0\nb[pseudomonas, 1-6-2020, 1]  0.008  0.995  -1.909  ...    1998.0    1911.0    1.0\nb[pseudomonas, 1-6-2020, 2]  0.010  0.966  -1.886  ...    2114.0    1720.0    1.0\nb[clostridium, 1-3-2020, 1]  0.028  1.024  -1.894  ...    2034.0    2103.0    1.0\nb[clostridium, 1-3-2020, 2]  0.003  1.012  -1.852  ...    1893.0    2012.0    1.0\nb[clostridium, 2-4-2020, 1]  0.009  1.000  -1.756  ...    2105.0    1997.0    1.0\nb[clostridium, 2-4-2020, 2] -0.001  0.997  -1.808  ...    1654.0    1757.0    1.0\nb[clostridium, 1-5-2020, 1] -0.014  1.001  -1.901  ...    1940.0    2106.0    1.0\nb[clostridium, 1-5-2020, 2]  0.027  0.999  -1.936  ...    1975.0    1978.0    1.0\nb[clostridium, 1-6-2020, 1]  0.053  1.012  -1.810  ...    1900.0    1784.0    1.0\nb[clostridium, 1-6-2020, 2]  0.032  0.994  -1.848  ...    1953.0    1921.0    1.0\n\n[24 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "sorting-dimensions",
        "headings": [
          "Label guide",
          "Sorting labels",
          "Sorting dimensions"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [16]: az.summary(schools, labeller=azl.IdxLabeller())\nOut[16]: \n           mean     sd  hdi_3%  hdi_97%  ...  mcse_sd  ess_bulk  ess_tail  r_hat\ntheta[0]  3.064  4.642  -5.972   11.547  ...    0.166     380.0     833.0   1.02\ntheta[1]  3.576  5.559  -6.779   13.838  ...    0.175     463.0     674.0   1.01\ntheta[2]  3.821  4.979  -5.507   13.232  ...    0.150     516.0    1104.0   1.02\ntheta[3]  4.478  4.939  -5.528   13.392  ...    0.141     503.0     666.0   1.01\ntheta[4]  4.544  5.521  -5.665   15.266  ...    0.163     449.0    1084.0   1.01\ntheta[5]  4.724  4.736  -4.039   13.999  ...    0.142     471.0    1018.0   1.02\ntheta[6]  6.026  5.782  -3.707   17.337  ...    0.206     348.0     743.0   1.02\ntheta[7]  6.250  5.436  -3.412   16.920  ...    0.168     402.0    1026.0   1.02\nmu        4.093  3.372  -2.118   10.403  ...    0.152     250.0     643.0   1.03\ntau       4.089  3.001   0.569    9.386  ...    0.178      79.0      54.0   1.07\n\n[10 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "labels",
            "IdxLabeller"
          ],
          "code_str": "azl.IdxLabeller",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.labels.IdxLabeller"
        },
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "labeling-with-indexes",
        "headings": [
          "Label guide",
          "Labeling with indexes"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [17]: az.summary(schools.isel(school=[2, 5, 7]), labeller=azl.IdxLabeller())\nOut[17]: \n           mean     sd  hdi_3%  hdi_97%  ...  mcse_sd  ess_bulk  ess_tail  r_hat\ntheta[0]  3.821  4.979  -5.507   13.232  ...    0.150     516.0    1104.0   1.02\ntheta[1]  4.724  4.736  -4.039   13.999  ...    0.142     471.0    1018.0   1.02\ntheta[2]  6.250  5.436  -3.412   16.920  ...    0.168     402.0    1026.0   1.02\nmu        4.093  3.372  -2.118   10.403  ...    0.152     250.0     643.0   1.03\ntau       4.089  3.001   0.569    9.386  ...    0.178      79.0      54.0   1.07\n\n[5 rows x 9 columns]",
      "names": [
        {
          "import_components": [
            "arviz",
            "labels",
            "IdxLabeller"
          ],
          "code_str": "azl.IdxLabeller",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.labels.IdxLabeller"
        },
        {
          "import_components": [
            "arviz",
            "summary"
          ],
          "code_str": "az.summary",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.summary"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "labeling-with-indexes",
        "headings": [
          "Label guide",
          "Labeling with indexes"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [18]: schools2 = az.load_arviz_data(\"non_centered_eight\")\n\nIn [19]: az.plot_forest(\n   ....:     (schools, schools2),\n   ....:     model_names=(\"centered\", \"non_centered\"),\n   ....:     coords={\"school\": [\"Deerfield\", \"Lawrenceville\", \"Mt. Hermon\"]},\n   ....:     figsize=(10,7),\n   ....:     labeller=azl.DimCoordLabeller(),\n   ....:     legend=True\n   ....: );\n   ....: ",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "labels",
            "DimCoordLabeller"
          ],
          "code_str": "azl.DimCoordLabeller",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "arviz.labels.DimCoordLabeller"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "labeller-mixtures",
        "headings": [
          "Label guide",
          "Labeller mixtures"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [20]: MixtureLabeller = azl.mix_labellers((azl.DimCoordLabeller, azl.NoModelLabeller))\n\nIn [21]: az.plot_forest(\n   ....:     (schools, schools2),\n   ....:     model_names=(\"centered\", \"non_centered\"),\n   ....:     coords={\"school\": [\"Deerfield\", \"Lawrenceville\", \"Mt. Hermon\"]},\n   ....:     figsize=(10,7),\n   ....:     labeller=MixtureLabeller(),\n   ....:     legend=True\n   ....: );\n   ....: ",
      "names": [
        {
          "import_components": [
            "arviz",
            "labels",
            "DimCoordLabeller"
          ],
          "code_str": "azl.DimCoordLabeller",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.labels.DimCoordLabeller"
        },
        {
          "import_components": [
            "arviz",
            "labels",
            "NoModelLabeller"
          ],
          "code_str": "azl.NoModelLabeller",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.labels.NoModelLabeller"
        },
        {
          "import_components": [
            "arviz",
            "labels",
            "mix_labellers"
          ],
          "code_str": "azl.mix_labellers",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.labels.mix_labellers"
        },
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "labeller-mixtures",
        "headings": [
          "Label guide",
          "Labeller mixtures"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [22]: from numpy.random import default_rng\n\nIn [23]: import numpy as np\n\nIn [24]: import xarray as xr\n\nIn [25]: rng = default_rng()\n\nIn [26]: cov = rng.normal(size=(4, 500, 3, 3))\n\nIn [27]: cov = np.einsum(\"...ij,...kj\", cov, cov)\n\nIn [28]: cov[:, :, [0, 1, 2], [0, 1, 2]] = 1\n\nIn [29]: subjects = [\"ecoli\", \"pseudomonas\", \"clostridium\"]\n\nIn [30]: idata = az.from_dict(\n   ....:     {\"cov\": cov},\n   ....:     dims={\"cov\": [\"subject\", \"subject bis\"]},\n   ....:     coords={\"subject\": subjects, \"subject bis\": subjects}\n   ....: )\n   ....: \n\nIn [31]: idata.posterior\nOut[31]: \n<xarray.Dataset>\nDimensions:      (chain: 4, draw: 500, subject: 3, subject bis: 3)\nCoordinates:\n  * chain        (chain) int64 0 1 2 3\n  * draw         (draw) int64 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n  * subject      (subject) <U11 'ecoli' 'pseudomonas' 'clostridium'\n  * subject bis  (subject bis) <U11 'ecoli' 'pseudomonas' 'clostridium'\nData variables:\n    cov          (chain, draw, subject, subject bis) float64 1.0 0.3147 ... 1.0\nAttributes:\n    created_at:     2022-05-12T23:25:50.058012\n    arviz_version:  0.13.0.dev0",
      "names": [
        {
          "import_components": [
            "numpy",
            "random"
          ],
          "code_str": "numpy.random",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "numpy.random"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "default_rng",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "default_rng"
          ],
          "code_str": "default_rng",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.default_rng"
        },
        {
          "import_components": [
            "numpy",
            "einsum"
          ],
          "code_str": "np.einsum",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "numpy.einsum"
        },
        {
          "import_components": [
            "arviz",
            "from_dict"
          ],
          "code_str": "az.from_dict",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "arviz.from_dict"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "custom-labellers",
        "headings": [
          "Label guide",
          "Custom labellers"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [32]: coords = {\n   ....:     'subject': xr.DataArray(\n   ....:         [\"ecoli\", \"ecoli\", \"pseudomonas\"], dims=['pointwise_sel']\n   ....:     ),\n   ....:     'subject bis': xr.DataArray(\n   ....:         [\"pseudomonas\", \"clostridium\", \"clostridium\"], dims=['pointwise_sel']\n   ....:     )\n   ....: }\n   ....: \n\nIn [33]: idata.posterior.sel(coords)\nOut[33]: \n<xarray.Dataset>\nDimensions:      (chain: 4, draw: 500, pointwise_sel: 3)\nCoordinates:\n  * chain        (chain) int64 0 1 2 3\n  * draw         (draw) int64 0 1 2 3 4 5 6 7 ... 493 494 495 496 497 498 499\n    subject      (pointwise_sel) <U11 'ecoli' 'ecoli' 'pseudomonas'\n    subject bis  (pointwise_sel) <U11 'pseudomonas' 'clostridium' 'clostridium'\nDimensions without coordinates: pointwise_sel\nData variables:\n    cov          (chain, draw, pointwise_sel) float64 0.3147 0.2141 ... 1.104\nAttributes:\n    created_at:     2022-05-12T23:25:50.058012\n    arviz_version:  0.13.0.dev0",
      "names": [],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "custom-labellers",
        "headings": [
          "Label guide",
          "Custom labellers"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [34]: az.plot_posterior(idata, coords=coords);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "custom-labellers",
        "headings": [
          "Label guide",
          "Custom labellers"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [35]: coords_ds = xr.Dataset(coords)\n\nIn [36]: class NonIdxCoordLabeller(azl.BaseLabeller):\n   ....:     \"\"\"Use non indexing coordinates as labels.\"\"\"\n   ....:     def __init__(self, coords_ds):\n   ....:         self.coords_ds = coords_ds\n   ....:     def sel_to_str(self, sel, isel):\n   ....:         new_sel = {k: v.values for k, v in self.coords_ds.sel(sel).items()}\n   ....:         return super().sel_to_str(new_sel, new_sel)\n   ....: \n\nIn [37]: labeller = NonIdxCoordLabeller(coords_ds)\n\nIn [38]: az.plot_posterior(idata, coords=coords, labeller=labeller);",
      "names": [
        {
          "import_components": [
            "arviz",
            "labels",
            "BaseLabeller"
          ],
          "code_str": "azl.BaseLabeller",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.labels.BaseLabeller"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "custom-labellers",
        "headings": [
          "Label guide",
          "Custom labellers"
        ]
      },
      "doc_lineno": 1
    },
    {
      "source": "In [39]: class NonIdxCoordLabeller(azl.BaseLabeller):\n   ....:     \"\"\"Use non indexing coordinates as labels.\"\"\"\n   ....:     def __init__(self, coords_ds):\n   ....:         self.coords_ds = coords_ds\n   ....:     def make_label_vert(self, var_name, sel, isel):\n   ....:         coords_ds_subset = self.coords_ds.sel(sel)\n   ....:         subj = coords_ds_subset[\"subject\"].values\n   ....:         subj_bis = coords_ds_subset[\"subject bis\"].values\n   ....:         return f\"Correlation between subjects\\n{subj} & {subj_bis}\"\n   ....: \n\nIn [40]: labeller = NonIdxCoordLabeller(coords_ds)\n\nIn [41]: az.plot_posterior(idata, coords=coords, labeller=labeller);",
      "names": [
        {
          "import_components": [
            "arviz",
            "labels",
            "BaseLabeller"
          ],
          "code_str": "azl.BaseLabeller",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.labels.BaseLabeller"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/label_guide",
        "ref_id": "custom-labellers",
        "headings": [
          "Label guide",
          "Custom labellers"
        ]
      },
      "doc_lineno": 1
    }
  ],
  "user_guide/numpyro_refitting": [
    {
      "source": "import arviz as az\nimport numpyro\nimport numpyro.distributions as dist\nimport jax.random as random\nfrom numpyro.infer import MCMC, NUTS\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "numpyro.set_host_device_count(4)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "def model(N, x, y=None):\n    b0 = numpyro.sample(\"b0\", dist.Normal(0, 10))\n    b1 = numpyro.sample(\"b1\", dist.Normal(0, 10))\n    sigma_e = numpyro.sample(\"sigma_e\", dist.HalfNormal(10))\n    numpyro.sample(\"y\", dist.Normal(b0 + b1 * x, sigma_e), obs=y)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n}\nkernel = NUTS(model)\nsample_kwargs = dict(\n    sampler=kernel, \n    num_warmup=1000, \n    num_samples=1000, \n    num_chains=4, \n    chain_method=\"parallel\"\n)\nmcmc = MCMC(**sample_kwargs)\nmcmc.run(random.PRNGKey(0), **data_dict)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n    \"constant_data\": {\"x\": xdata}\n}\nidata = az.from_numpyro(mcmc, **idata_kwargs)\nidata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "class NumPyroSamplingWrapper(az.SamplingWrapper):\n    def __init__(self, model, **kwargs):        \n        self.model_fun = model.sampler.model\n        self.rng_key = kwargs.pop(\"rng_key\", random.PRNGKey(0))\n        \n        super(NumPyroSamplingWrapper, self).__init__(model, **kwargs)\n        \n    def log_likelihood__i(self, excluded_obs, idata__i):\n        samples = {\n            key: values.values.reshape((-1, *values.values.shape[2:]))\n            for key, values \n            in idata__i.posterior.items()\n        }\n        log_likelihood_dict = numpyro.infer.log_likelihood(\n            self.model_fun, samples, **excluded_obs\n        )\n        if len(log_likelihood_dict) > 1:\n            raise ValueError(\"multiple likelihoods found\")\n        data = {}\n        nchains = idata__i.posterior.dims[\"chain\"]\n        ndraws = idata__i.posterior.dims[\"draw\"]\n        for obs_name, log_like in log_likelihood_dict.items():\n            shape = (nchains, ndraws) + log_like.shape[1:]\n            data[obs_name] = np.reshape(log_like.copy(), shape)\n        return az.dict_to_dataset(data)[obs_name]\n    \n    def sample(self, modified_observed_data):\n        self.rng_key, subkey = random.split(self.rng_key)\n        mcmc = MCMC(**self.sample_kwargs)\n        mcmc.run(subkey, **modified_observed_data)\n        return mcmc\n\n    def get_inference_data(self, fit):\n        # Cloned from PyStanSamplingWrapper.\n        idata = az.from_numpyro(mcmc, **self.idata_kwargs)\n        return idata\n    \nclass LinRegWrapper(NumPyroSamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"].values\n        ydata = self.idata_orig.observed_data[\"y\"].values\n        mask = np.isin(np.arange(len(xdata)), idx)\n        data__i = {\"x\": xdata[~mask], \"y\": ydata[~mask], \"N\": len(ydata[~mask])}\n        data_ex = {\"x\": xdata[mask], \"y\": ydata[mask], \"N\": len(ydata[mask])}\n        return data__i, data_ex",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "reshape"
          ],
          "code_str": "np.reshape",
          "lineno": 24,
          "end_lineno": 24,
          "context": "none",
          "resolved_location": "numpy.reshape"
        },
        {
          "import_components": [
            "arviz",
            "dict_to_dataset"
          ],
          "code_str": "az.dict_to_dataset",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "arviz.dict_to_dataset"
        },
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 35,
          "end_lineno": 35,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 42,
          "end_lineno": 42,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "numpyro_wrapper = LinRegWrapper(\n    mcmc, \n    rng_key=random.PRNGKey(5),\n    idata_orig=idata, \n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "loo_relooed = az.reloo(numpyro_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting",
        "ref_id": "refitting-numpyro-models-with-arviz",
        "headings": [
          "Refitting NumPyro models with ArviZ"
        ]
      },
      "doc_lineno": 230002
    }
  ],
  "user_guide/numpyro_refitting_xr_lik": [
    {
      "source": "import arviz as az\nimport numpyro\nimport numpyro.distributions as dist\nimport jax.random as random\nfrom numpyro.infer import MCMC, NUTS\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 6,
          "end_lineno": 6,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 7,
          "end_lineno": 7,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 8,
          "end_lineno": 8,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "numpyro.set_host_device_count(4)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "def model(N, x, y=None):\n    b0 = numpyro.sample(\"b0\", dist.Normal(0, 10))\n    b1 = numpyro.sample(\"b1\", dist.Normal(0, 10))\n    sigma_e = numpyro.sample(\"sigma_e\", dist.HalfNormal(10))\n    numpyro.sample(\"y\", dist.Normal(b0 + b1 * x, sigma_e), obs=y)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n}\nkernel = NUTS(model)\nsample_kwargs = dict(\n    sampler=kernel, \n    num_warmup=1000, \n    num_samples=1000, \n    num_chains=4, \n    chain_method=\"parallel\"\n)\nmcmc = MCMC(**sample_kwargs)\nmcmc.run(random.PRNGKey(0), **data_dict)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n    \"constant_data\": {\"x\": xdata}\n}\nidata = az.from_numpyro(mcmc, **idata_kwargs)\ndel idata.log_likelihood\nidata",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "def calculate_log_lik(x, y, b0, b1, sigma_e):\n    mu = b0 + b1 * x\n    return stats.norm(mu, sigma_e).logpdf(y)",
      "names": [
        {
          "import_components": [
            "scipy",
            "stats",
            "norm"
          ],
          "code_str": "stats.norm",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.norm"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "log_lik = xr.apply_ufunc(\n    calculate_log_lik,\n    idata.constant_data[\"x\"],\n    idata.observed_data[\"y\"],\n    idata.posterior[\"b0\"],\n    idata.posterior[\"b1\"],\n    idata.posterior[\"sigma_e\"],\n)\nidata.add_groups(log_likelihood=log_lik)",
      "names": [
        {
          "import_components": [
            "xarray",
            "apply_ufunc"
          ],
          "code_str": "xr.apply_ufunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xarray.apply_ufunc"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "calculate_log_lik(\n    idata.constant_data[\"x\"].values,\n    idata.observed_data[\"y\"].values,\n    idata.posterior[\"b0\"].values,\n    idata.posterior[\"b1\"].values,\n    idata.posterior[\"sigma_e\"].values\n)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "class NumPyroSamplingWrapper(az.SamplingWrapper):\n    def __init__(self, model, **kwargs):        \n        self.rng_key = kwargs.pop(\"rng_key\", random.PRNGKey(0))\n        \n        super(NumPyroSamplingWrapper, self).__init__(model, **kwargs)\n    \n    def sample(self, modified_observed_data):\n        self.rng_key, subkey = random.split(self.rng_key)\n        mcmc = MCMC(**self.sample_kwargs)\n        mcmc.run(subkey, **modified_observed_data)\n        return mcmc\n\n    def get_inference_data(self, fit):\n        # Cloned from PyStanSamplingWrapper.\n        idata = az.from_numpyro(mcmc, **self.idata_kwargs)\n        return idata\n    \nclass LinRegWrapper(NumPyroSamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"]\n        ydata = self.idata_orig.observed_data[\"y\"]\n        mask = np.isin(np.arange(len(xdata)), idx)\n        # data__i is passed to numpyro to sample on it -> dict of numpy array\n        # data_ex is passed to apply_ufunc -> list of DataArray\n        data__i = {\"x\": xdata[~mask].values, \"y\": ydata[~mask].values, \"N\": len(ydata[~mask])}\n        data_ex = [xdata[mask], ydata[mask]]\n        return data__i, data_ex\n",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "arviz",
            "from_numpyro"
          ],
          "code_str": "az.from_numpyro",
          "lineno": 15,
          "end_lineno": 15,
          "context": "none",
          "resolved_location": "arviz.from_numpyro"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 22,
          "end_lineno": 22,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "pystan_wrapper = LinRegWrapper(\n    mcmc, \n    rng_key=random.PRNGKey(7),\n    log_lik_fun=calculate_log_lik, \n    posterior_vars=(\"b0\", \"b1\", \"sigma_e\"),\n    idata_orig=idata, \n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/numpyro_refitting_xr_lik",
        "ref_id": "refitting-numpyro-models-with-arviz-and-xarray",
        "headings": [
          "Refitting NumPyro models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 310002
    }
  ],
  "user_guide/plots_arguments_guide": [
    {
      "source": "import arviz as az\nimport numpy as np\n\ncentered_eight = az.load_arviz_data('centered_eight')\nnon_centered_eight = az.load_arviz_data('non_centered_eight')\n\nx_data = np.random.normal(0, 1, 100)\ny_data = np.random.normal(2 + x_data * 0.5, 0.5, (2, 50, 100))",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "plots-arguments-guide",
        "headings": [
          "Plots\u2019 arguments guide"
        ]
      },
      "doc_lineno": 28
    },
    {
      "source": "az.style.use(\"arviz-darkgrid\")",
      "names": [],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "plots-arguments-guide",
        "headings": [
          "Plots\u2019 arguments guide"
        ]
      },
      "doc_lineno": 39
    },
    {
      "source": "az.plot_posterior(centered_eight);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      },
      "doc_lineno": 66
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names='mu');",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      },
      "doc_lineno": 72
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names=['mu', 'tau']);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      },
      "doc_lineno": 78
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names=['~mu', '~theta']);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      },
      "doc_lineno": 84
    },
    {
      "source": "mu = (\"mu\", \"var\")\nsamples = np.random.normal(0, 1, 100)\ndata = az.dict_to_dataset({mu: samples})\naz.plot_posterior(data);",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        },
        {
          "import_components": [
            "arviz",
            "dict_to_dataset"
          ],
          "code_str": "az.dict_to_dataset",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "arviz.dict_to_dataset"
        },
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "var-names",
        "headings": [
          "Plots\u2019 arguments guide",
          "var_names"
        ]
      },
      "doc_lineno": 91
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names='ta', filter_vars=\"like\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "filter-vars",
        "headings": [
          "Plots\u2019 arguments guide",
          "filter_vars"
        ]
      },
      "doc_lineno": 108
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names='~ta', filter_vars=\"like\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "filter-vars",
        "headings": [
          "Plots\u2019 arguments guide",
          "filter_vars"
        ]
      },
      "doc_lineno": 116
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names=\"u$\", filter_vars=\"regex\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "filter-vars",
        "headings": [
          "Plots\u2019 arguments guide",
          "filter_vars"
        ]
      },
      "doc_lineno": 125
    },
    {
      "source": "coords = {\"school\": [\"Choate\", \"Phillips Exeter\"]};\naz.plot_posterior(centered_eight, var_names=[\"mu\", \"theta\"], coords=coords);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "coords",
        "headings": [
          "Plots\u2019 arguments guide",
          "coords"
        ]
      },
      "doc_lineno": 146
    },
    {
      "source": "az.plot_forest(centered_eight, var_names=[\"mu\", \"tau\"]);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "combined",
        "headings": [
          "Plots\u2019 arguments guide",
          "combined"
        ]
      },
      "doc_lineno": 163
    },
    {
      "source": "az.plot_forest(centered_eight, var_names=[\"mu\", \"tau\"], combined=True);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "combined",
        "headings": [
          "Plots\u2019 arguments guide",
          "combined"
        ]
      },
      "doc_lineno": 169
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names=[\"mu\", \"theta\"], combine_dims={\"school\"});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "combine-dims",
        "headings": [
          "Plots\u2019 arguments guide",
          "combine_dims"
        ]
      },
      "doc_lineno": 183
    },
    {
      "source": "az.plot_pair(\n    non_centered_eight, var_names=[\"theta\", \"theta_t\"], combine_dims={\"school\"}, kind=\"kde\"\n);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "combine-dims",
        "headings": [
          "Plots\u2019 arguments guide",
          "combine_dims"
        ]
      },
      "doc_lineno": 196
    },
    {
      "source": "az.plot_pair(non_centered_eight, var_names=[\"theta\", \"mu\"], combine_dims={\"school\"});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_pair"
          ],
          "code_str": "az.plot_pair",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_pair"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "combine-dims",
        "headings": [
          "Plots\u2019 arguments guide",
          "combine_dims"
        ]
      },
      "doc_lineno": 204
    },
    {
      "source": "az.plot_forest(\n    centered_eight, var_names=\"theta\", combined=True, combine_dims={\"school\"}\n);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "combine-dims",
        "headings": [
          "Plots\u2019 arguments guide",
          "combine_dims"
        ]
      },
      "doc_lineno": 214
    },
    {
      "source": "az.plot_forest(\n    centered_eight, var_names=\"theta\", combine_dims={\"chain\", \"school\"}\n);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_forest"
          ],
          "code_str": "az.plot_forest",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_forest"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "combine-dims",
        "headings": [
          "Plots\u2019 arguments guide",
          "combine_dims"
        ]
      },
      "doc_lineno": 222
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names=\"mu\", hdi_prob=0.8);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "hdi-prob",
        "headings": [
          "Plots\u2019 arguments guide",
          "hdi_prob"
        ]
      },
      "doc_lineno": 236
    },
    {
      "source": "az.plot_density([centered_eight, non_centered_eight], grid=(4, 5));",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "grid",
        "headings": [
          "Plots\u2019 arguments guide",
          "grid"
        ]
      },
      "doc_lineno": 246
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names=[\"mu\", \"tau\"], figsize=(3, 6));",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "figsize",
        "headings": [
          "Plots\u2019 arguments guide",
          "figsize"
        ]
      },
      "doc_lineno": 256
    },
    {
      "source": "az.plot_posterior(centered_eight, var_names=\"theta\", coords=coords, textsize=30);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "textsize",
        "headings": [
          "Plots\u2019 arguments guide",
          "textsize"
        ]
      },
      "doc_lineno": 266
    },
    {
      "source": "az.plot_hdi(x_data, y_data, color=\"red\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "color-or-colors",
        "headings": [
          "Plots\u2019 arguments guide",
          "color or colors"
        ]
      },
      "doc_lineno": 284
    },
    {
      "source": "az.plot_density([centered_eight, non_centered_eight], colors=[\"salmon\", \"indigo\"]);",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_density"
          ],
          "code_str": "az.plot_density",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_density"
        }
      ],
      "example": {
        "document": "user_guide/plots_arguments_guide",
        "ref_id": "color-or-colors",
        "headings": [
          "Plots\u2019 arguments guide",
          "color or colors"
        ]
      },
      "doc_lineno": 300
    }
  ],
  "user_guide/plotting": [],
  "user_guide/plotting_with_bokeh": [
    {
      "source": "import arviz as az\nimport matplotlib.pyplot as plt\nimport numpy as np\n\naz.style.use(\"arviz-darkgrid\")\n\n# Confgure Bokeh as backend\naz.rcParams[\"plot.backend\"] = \"bokeh\"\naz.output_notebook()",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "arviz",
            "output_notebook"
          ],
          "code_str": "az.output_notebook",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.output_notebook"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_bokeh",
        "ref_id": "plotting-with-bokeh",
        "headings": [
          "Plotting with Bokeh"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": "# load data\ndata = az.load_arviz_data('radon')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_bokeh",
        "ref_id": "using-backend-kwargs",
        "headings": [
          "Plotting with Bokeh",
          "Customizing plots",
          "Using backend_kwargs"
        ]
      },
      "doc_lineno": 49
    },
    {
      "source": "az.plot_posterior(\n    data,\n    var_names=[\"g\"],\n    backend_kwargs={\"width\": 350, \n                    \"background_fill_color\": \"#d3d0e3\"});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_bokeh",
        "ref_id": "using-backend-kwargs",
        "headings": [
          "Plotting with Bokeh",
          "Customizing plots",
          "Using backend_kwargs"
        ]
      },
      "doc_lineno": 54
    },
    {
      "source": "from bokeh.io import show\nfrom bokeh.layouts import row\nfrom bokeh.plotting import figure\n\n# load data\nobserved_data = data.observed_data.y.to_numpy()\n# create axes\nf1 = figure(x_range=(observed_data.min() - 1, observed_data.max() + 1))\nf2 = figure(x_range=f1.x_range, y_range=f1.y_range)\n# plot\naz.plot_ppc(data, group=\"prior\", num_pp_samples=100, show=False, ax=f1)\naz.plot_ppc(data, group=\"posterior\", num_pp_samples=100, show=False, ax=f2)\n\naz.show_layout([[f1], [f2]])",
      "names": [
        {
          "import_components": [
            "bokeh",
            "io"
          ],
          "code_str": "bokeh.io",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_from",
          "resolved_location": "bokeh.io"
        },
        {
          "import_components": [
            "bokeh",
            "io",
            "show"
          ],
          "code_str": "show",
          "lineno": 1,
          "end_lineno": 1,
          "context": "import_target",
          "resolved_location": "bokeh.io.show"
        },
        {
          "import_components": [
            "bokeh",
            "layouts"
          ],
          "code_str": "bokeh.layouts",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_from",
          "resolved_location": "bokeh.layouts"
        },
        {
          "import_components": [
            "bokeh",
            "layouts",
            "row"
          ],
          "code_str": "row",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "bokeh.layouts.row"
        },
        {
          "import_components": [
            "bokeh",
            "plotting",
            "figure"
          ],
          "code_str": "figure",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "bokeh.plotting.figure"
        },
        {
          "import_components": [
            "bokeh",
            "plotting",
            "figure"
          ],
          "code_str": "figure",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "bokeh.plotting.figure"
        },
        {
          "import_components": [
            "bokeh",
            "plotting",
            "figure"
          ],
          "code_str": "figure",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "bokeh.plotting.figure"
        },
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        },
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 12,
          "end_lineno": 12,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        },
        {
          "import_components": [
            "arviz",
            "show_layout"
          ],
          "code_str": "az.show_layout",
          "lineno": 14,
          "end_lineno": 14,
          "context": "none",
          "resolved_location": "arviz.show_layout"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_bokeh",
        "ref_id": "defining-custom-axes",
        "headings": [
          "Plotting with Bokeh",
          "Customizing plots",
          "Defining custom axes"
        ]
      },
      "doc_lineno": 74
    },
    {
      "source": "# load data\ndata = az.load_arviz_data('regression1d')\nX = data.observed_data.y_dim_0.values\nY = data.observed_data.y.values\ny_pp = data.posterior_predictive.y.values\n# plot\nf1 = figure(plot_width=600, plot_height=600, toolbar_location=\"below\")\naz.plot_hdi(X, y_pp, color=\"#b5a7b6\", show=False, ax=f1)\nf1.scatter(X, Y, marker=\"circle\", fill_color=\"#0d7591\")\n\nshow(f1)",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "bokeh",
            "plotting",
            "figure"
          ],
          "code_str": "figure",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "bokeh.plotting.figure"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        },
        {
          "import_components": [
            "bokeh",
            "io",
            "show"
          ],
          "code_str": "show",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "bokeh.io.show"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_bokeh",
        "ref_id": "extending-arviz-bokeh-plots",
        "headings": [
          "Plotting with Bokeh",
          "Customizing plots",
          "Extending ArviZ-Bokeh plots"
        ]
      },
      "doc_lineno": 99
    },
    {
      "source": "# load data\nobserved_data = data.observed_data.y.values\n# create axes\nf1 = figure(plot_width=400, plot_height=400, toolbar_location=\"below\")\nf2 = figure(plot_width=400, plot_height=400, toolbar_location=\"below\")\n# plot\naz.plot_hdi(X, y_pp, color=\"#b5a7b6\", show=False, ax=f1)\nf1.line(X, y_pp.mean(axis=(0, 1)), color=\"black\")\nf2.scatter(X, Y, marker=\"circle\", fill_color=\"#0d7591\")\n\nshow(row(f1, f2))",
      "names": [
        {
          "import_components": [
            "bokeh",
            "plotting",
            "figure"
          ],
          "code_str": "figure",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "bokeh.plotting.figure"
        },
        {
          "import_components": [
            "bokeh",
            "plotting",
            "figure"
          ],
          "code_str": "figure",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "bokeh.plotting.figure"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        },
        {
          "import_components": [
            "bokeh",
            "layouts",
            "row"
          ],
          "code_str": "row",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "bokeh.layouts.row"
        },
        {
          "import_components": [
            "bokeh",
            "io",
            "show"
          ],
          "code_str": "show",
          "lineno": 11,
          "end_lineno": 11,
          "context": "none",
          "resolved_location": "bokeh.io.show"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_bokeh",
        "ref_id": "extending-arviz-bokeh-plots",
        "headings": [
          "Plotting with Bokeh",
          "Customizing plots",
          "Extending ArviZ-Bokeh plots"
        ]
      },
      "doc_lineno": 115
    }
  ],
  "user_guide/plotting_with_matplotlib": [
    {
      "source": "import arviz as az\nimport matplotlib.pyplot as plt\nimport numpy as np\n\naz.style.use(\"arviz-darkgrid\")",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 2,
          "end_lineno": 2,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_matplotlib",
        "ref_id": "plotting-with-matplotlib",
        "headings": [
          "Plotting with Matplotlib"
        ]
      },
      "doc_lineno": 23
    },
    {
      "source": "# load data\ndata = az.load_arviz_data('radon')",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_matplotlib",
        "ref_id": "using-backend-kwargs",
        "headings": [
          "Plotting with Matplotlib",
          "Customizing plots",
          "Using backend_kwargs"
        ]
      },
      "doc_lineno": 40
    },
    {
      "source": "az.plot_posterior(\n    data,\n    var_names=[\"g\"],\n    backend_kwargs={\n        \"facecolor\": \"#d3d0e3\",\n        \"gridspec_kw\": {\n            \"width_ratios\": [6,4]}});",
      "names": [
        {
          "import_components": [
            "arviz",
            "plot_posterior"
          ],
          "code_str": "az.plot_posterior",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.plot_posterior"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_matplotlib",
        "ref_id": "using-backend-kwargs",
        "headings": [
          "Plotting with Matplotlib",
          "Customizing plots",
          "Using backend_kwargs"
        ]
      },
      "doc_lineno": 45
    },
    {
      "source": "# load data\nobserved_data = data.observed_data.y.values\n# create axes\n_, ax = plt.subplots(2, 1, sharex=True, sharey=True, figsize=(6, 6))\nax[0].set_xlim(xmin=observed_data.min() - 1, xmax=observed_data.max() + 1)\n# plot\naz.plot_ppc(data, group=\"prior\", num_pp_samples=100, ax=ax[0])\naz.plot_ppc(data, group=\"posterior\", num_pp_samples=100, ax=ax[1]);",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        },
        {
          "import_components": [
            "arviz",
            "plot_ppc"
          ],
          "code_str": "az.plot_ppc",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "arviz.plot_ppc"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_matplotlib",
        "ref_id": "defining-custom-axes",
        "headings": [
          "Plotting with Matplotlib",
          "Customizing plots",
          "Defining custom axes"
        ]
      },
      "doc_lineno": 72
    },
    {
      "source": "# load data\ndata = az.load_arviz_data('regression1d')\nX = data.observed_data.y_dim_0\nY = data.observed_data.y\ny_pp = data.posterior_predictive.y\n# plot\nax = az.plot_hdi(X, y_pp, color=\"#b5a7b6\")\nax.scatter(X, Y, c=\"#0d7591\");",
      "names": [
        {
          "import_components": [
            "arviz",
            "load_arviz_data"
          ],
          "code_str": "az.load_arviz_data",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "arviz.load_arviz_data"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 7,
          "end_lineno": 7,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_matplotlib",
        "ref_id": "extending-arviz-matplotlib-plots",
        "headings": [
          "Plotting with Matplotlib",
          "Customizing plots",
          "Extending ArviZ-Matplotlib plots"
        ]
      },
      "doc_lineno": 87
    },
    {
      "source": "# create axes\n_, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 6), sharey=True)\n# plot ax1\naz.plot_hdi(X, y_pp, color=\"#b5a7b6\", ax=ax1)\nax1.plot(X, y_pp.mean(axis=(0, 1)), c=\"black\")\n# plot ax2\nax2.scatter(X, Y, c=\"#0d7591\");",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "subplots"
          ],
          "code_str": "plt.subplots",
          "lineno": 2,
          "end_lineno": 2,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.subplots"
        },
        {
          "import_components": [
            "arviz",
            "plot_hdi"
          ],
          "code_str": "az.plot_hdi",
          "lineno": 4,
          "end_lineno": 4,
          "context": "none",
          "resolved_location": "arviz.plot_hdi"
        }
      ],
      "example": {
        "document": "user_guide/plotting_with_matplotlib",
        "ref_id": "extending-arviz-matplotlib-plots",
        "headings": [
          "Plotting with Matplotlib",
          "Customizing plots",
          "Extending ArviZ-Matplotlib plots"
        ]
      },
      "doc_lineno": 100
    }
  ],
  "user_guide/pymc3_refitting": [
    {
      "source": "import arviz as az\nimport pymc3 as pm\nimport numpy as np\nimport matplotlib.pyplot as plt",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "plt.plot(xdata, ydata);",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "def compile_linreg_model(xdata, ydata):\n    with pm.Model() as model:\n        b0 = pm.Normal(\"b0\", 0, 10)\n        b1 = pm.Normal(\"b1\", 0, 10)\n        sigma_e = pm.HalfNormal(\"sigma_e\", 10)\n\n        y = pm.Normal(\"y\", b0 + b1 * xdata, sigma_e, observed=ydata)\n    return model",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "sample_kwargs = {\"draws\": 500, \"tune\": 500, \"chains\": 4}\nwith compile_linreg_model(xdata, ydata) as linreg_model:\n    trace = pm.sample(**sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "dims = {\"y\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n}\nidata = az.from_pymc3(trace, model=linreg_model, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "class PyMC3LinRegWrapper(az.SamplingWrapper):\n    def __init__(self, xdata, ydata, **kwargs):\n        super(PyMC3LinRegWrapper, self).__init__(**kwargs)\n\n        self.xdata = xdata\n        self.ydata = ydata\n        \n    def sample(self, modified_observed_data):\n        with self.model(**modified_observed_data) as linreg_model:\n            trace = pm.sample(\n                **self.sample_kwargs, \n                return_inferencedata=False, \n                idata_kwargs={\"log_likelihood\": False}\n            )\n        self.pymc3_model = linreg_model\n        return trace\n    \n    def get_inference_data(self, trace):\n        idata = az.from_pymc3(trace, model=self.pymc3_model, **self.idata_kwargs)\n        idata.pymc3_trace = trace\n        return idata\n        \n    def log_likelihood__i(self, excluded_observed_data, idata__i):\n        model_ex = compile_linreg_model(**excluded_observed_data)\n        log_lik__i = az.from_pymc3(idata__i.pymc3_trace, model=model_ex).log_likelihood[\"y\"]\n        return log_lik__i\n        \n    def sel_observations(self, idx):\n        mask = np.isin(np.arange(len(self.xdata)), idx)\n        data_dict = {\"xdata\": self.xdata, \"ydata\": self.ydata}\n        data__i = {key: value[~mask] for key, value in data_dict.items()}\n        data_ex = {key: value[mask] for key, value in data_dict.items()}\n        return data__i, data_ex",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 19,
          "end_lineno": 19,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        },
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 25,
          "end_lineno": 25,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 29,
          "end_lineno": 29,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 130002
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "pymc3_wrapper = PyMC3LinRegWrapper(\n    model=compile_linreg_model, xdata=xdata, ydata=ydata, sample_kwargs=sample_kwargs, idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "loo_relooed = az.reloo(pymc3_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting",
        "ref_id": "refitting-pymc3-models-with-arviz",
        "headings": [
          "Refitting PyMC3 models with ArviZ"
        ]
      },
      "doc_lineno": 220002
    }
  ],
  "user_guide/pymc3_refitting_xr_lik": [
    {
      "source": "import arviz as az\nimport pymc3 as pm\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "plt.plot(xdata, ydata);",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "def compile_linreg_model(xdata, ydata):\n    with pm.Model() as model:\n        x = pm.Data(\"x\", xdata)\n        b0 = pm.Normal(\"b0\", 0, 10)\n        b1 = pm.Normal(\"b1\", 0, 10)\n        sigma_e = pm.HalfNormal(\"sigma_e\", 10)\n\n        y = pm.Normal(\"y\", b0 + b1 * x, sigma_e, observed=ydata)\n    return model",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "sample_kwargs = {\"draws\": 500, \"tune\": 500, \"chains\": 4}\nwith compile_linreg_model(xdata, ydata) as linreg_model:\n    trace = pm.sample(**sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"]}\nidata_kwargs = {\n    \"dims\": dims,\n    \"log_likelihood\": False,\n}\nidata = az.from_pymc3(trace, model=linreg_model, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pymc3"
          ],
          "code_str": "az.from_pymc3",
          "lineno": 6,
          "end_lineno": 6,
          "context": "none",
          "resolved_location": "arviz.from_pymc3"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 110002
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "def calculate_log_lik(x, y, b0, b1, sigma_e):\n    mu = b0 + b1 * x\n    return stats.norm(mu, sigma_e).logpdf(y)",
      "names": [
        {
          "import_components": [
            "scipy",
            "stats",
            "norm"
          ],
          "code_str": "stats.norm",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.norm"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "log_lik = xr.apply_ufunc(\n    calculate_log_lik,\n    idata.constant_data[\"x\"],\n    idata.observed_data[\"y\"],\n    idata.posterior[\"b0\"],\n    idata.posterior[\"b1\"],\n    idata.posterior[\"sigma_e\"],\n)\nidata.add_groups(log_likelihood=log_lik)",
      "names": [
        {
          "import_components": [
            "xarray",
            "apply_ufunc"
          ],
          "code_str": "xr.apply_ufunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xarray.apply_ufunc"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "calculate_log_lik(\n    idata.constant_data[\"x\"].values,\n    idata.observed_data[\"y\"].values,\n    idata.posterior[\"b0\"].values,\n    idata.posterior[\"b1\"].values,\n    idata.posterior[\"sigma_e\"].values\n)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "class PyMC3LinRegWrapper(az.SamplingWrapper):        \n    def sample(self, modified_observed_data):\n        with self.model(*modified_observed_data) as linreg_model:\n            idata = pm.sample(\n                **self.sample_kwargs, \n                return_inferencedata=True, \n                idata_kwargs=self.idata_kwargs\n            )\n        return idata\n    \n    def get_inference_data(self, idata):\n        return idata\n        \n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"]\n        ydata = self.idata_orig.observed_data[\"y\"]\n        mask = np.isin(np.arange(len(xdata)), idx)\n        data__i = [ary[~mask] for ary in (xdata, ydata)]\n        data_ex = [ary[mask] for ary in (xdata, ydata)]\n        return data__i, data_ex",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "numpy.isin"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "pymc3_wrapper = PyMC3LinRegWrapper(\n    model=compile_linreg_model, \n    log_lik_fun=calculate_log_lik, \n    posterior_vars=(\"b0\", \"b1\", \"sigma_e\"),\n    idata_orig=idata,\n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs,\n)",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "loo_relooed = az.reloo(pymc3_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pymc3_refitting_xr_lik",
        "ref_id": "refitting-pymc3-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyMC3 models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 310002
    }
  ],
  "user_guide/pystan2_refitting": [
    {
      "source": "import arviz as az\nimport pystan\nimport numpy as np\nimport matplotlib.pyplot as plt",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "refit_lr_code = \"\"\"\ndata {\n  // Define data for fitting\n  int<lower=0> N;\n  vector[N] x;\n  vector[N] y;\n  // Define excluded data. It will not be used when fitting.\n  int<lower=0> N_ex;\n  vector[N_ex] x_ex;\n  vector[N_ex] y_ex;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real<lower=0> sigma_e;\n}\n\nmodel {\n  b0 ~ normal(0, 10);\n  b1 ~ normal(0, 10);\n  sigma_e ~ normal(0, 10);\n  for (i in 1:N) {\n    y[i] ~ normal(b0 + b1 * x[i], sigma_e);  // use only data for fitting\n  }\n  \n}\n\ngenerated quantities {\n    vector[N] log_lik;\n    vector[N_ex] log_lik_ex;\n    vector[N] y_hat;\n    \n    for (i in 1:N) {\n        // calculate log likelihood and posterior predictive, there are \n        // no restrictions on adding more generated quantities\n        log_lik[i] = normal_lpdf(y[i] | b0 + b1 * x[i], sigma_e);\n        y_hat[i] = normal_rng(b0 + b1 * x[i], sigma_e);\n    }\n    for (j in 1:N_ex) {\n        // calculate the log likelihood of the excluded data given data_for_fitting\n        log_lik_ex[j] = normal_lpdf(y_ex[j] | b0 + b1 * x_ex[j], sigma_e);\n    }\n}\n\"\"\"",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "sm = pystan.StanModel(model_code=refit_lr_code)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n    # No excluded data in initial fit\n    \"N_ex\": 0,\n    \"x_ex\": [],\n    \"y_ex\": [],\n}\nsample_kwargs = {\"iter\": 1000, \"chains\": 4}\nfit = sm.sampling(data=data_dict, **sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"], \"log_likelihood\": [\"time\"], \"y_hat\": [\"time\"]}\nidata_kwargs = {\n    \"posterior_predictive\": [\"y_hat\"],\n    \"observed_data\": \"y\",\n    \"constant_data\": \"x\",\n    \"log_likelihood\": [\"log_lik\", \"log_lik_ex\"],\n    \"dims\": dims,\n}\nidata = az.from_pystan(posterior=fit, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "class LinearRegressionWrapper(az.PyStan2SamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data.x.values\n        ydata = self.idata_orig.observed_data.y.values\n        mask = np.full_like(xdata, True, dtype=bool)\n        mask[idx] = False\n        N_obs = len(mask)\n        N_ex = np.sum(~mask)\n        observations = {\n            \"N\": N_obs - N_ex,\n            \"x\": xdata[mask],\n            \"y\": ydata[mask],\n            \"N_ex\": N_ex,\n            \"x_ex\": xdata[~mask],\n            \"y_ex\": ydata[~mask],\n        }\n        return observations, \"log_lik_ex\"",
      "names": [
        {
          "import_components": [
            "arviz",
            "PyStan2SamplingWrapper"
          ],
          "code_str": "az.PyStan2SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.wrap_stan.PyStan2SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "full_like"
          ],
          "code_str": "np.full_like",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.full_like"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "pystan_wrapper = LinearRegressionWrapper(\n    sm, idata_orig=idata, sample_kwargs=sample_kwargs, idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting",
        "ref_id": "refitting-pystan-2-x-models-with-arviz",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ"
        ]
      },
      "doc_lineno": 230002
    }
  ],
  "user_guide/pystan2_refitting_xr_lik": [
    {
      "source": "import arviz as az\nimport pystan\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport xarray as xr",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        },
        {
          "import_components": [
            "scipy",
            "stats"
          ],
          "code_str": "scipy.stats",
          "lineno": 5,
          "end_lineno": 5,
          "context": "import_target",
          "resolved_location": "scipy.stats"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 50002
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "refit_lr_code = \"\"\"\ndata {\n  // Define data for fitting\n  int<lower=0> N;\n  vector[N] x;\n  vector[N] y;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real<lower=0> sigma_e;\n}\n\nmodel {\n  b0 ~ normal(0, 10);\n  b1 ~ normal(0, 10);\n  sigma_e ~ normal(0, 10);\n  for (i in 1:N) {\n    y[i] ~ normal(b0 + b1 * x[i], sigma_e);  // use only data for fitting\n  }\n  \n}\n\ngenerated quantities {\n    vector[N] y_hat;\n    \n    for (i in 1:N) {\n        // pointwise log likelihood will be calculated outside Stan, \n        // posterior predictive however will be generated here, there are \n        // no restrictions on adding more generated quantities\n        y_hat[i] = normal_rng(b0 + b1 * x[i], sigma_e);\n    }\n}\n\"\"\"",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 80002
    },
    {
      "source": "sm = pystan.StanModel(model_code=refit_lr_code)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n}\nsample_kwargs = {\"iter\": 1000, \"chains\": 4}\nfit = sm.sampling(data=data_dict, **sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"], \"y_hat\": [\"time\"]}\nidata_kwargs = {\n    \"posterior_predictive\": [\"y_hat\"],\n    \"observed_data\": \"y\",\n    \"constant_data\": \"x\",\n    \"dims\": dims,\n}\nidata = az.from_pystan(posterior=fit, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "def calculate_log_lik(x, y, b0, b1, sigma_e):\n    mu = b0 + b1 * x\n    return stats.norm(mu, sigma_e).logpdf(y)",
      "names": [
        {
          "import_components": [
            "scipy",
            "stats",
            "norm"
          ],
          "code_str": "stats.norm",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "scipy.stats.norm"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "log_lik = xr.apply_ufunc(\n    calculate_log_lik,\n    idata.constant_data[\"x\"],\n    idata.observed_data[\"y\"],\n    idata.posterior[\"b0\"],\n    idata.posterior[\"b1\"],\n    idata.posterior[\"sigma_e\"],\n)\nidata.add_groups(log_likelihood=log_lik)",
      "names": [
        {
          "import_components": [
            "xarray",
            "apply_ufunc"
          ],
          "code_str": "xr.apply_ufunc",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "xarray.apply_ufunc"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 160002
    },
    {
      "source": "calculate_log_lik(\n    idata.constant_data[\"x\"].values,\n    idata.observed_data[\"y\"].values,\n    idata.posterior[\"b0\"].values,\n    idata.posterior[\"b1\"].values,\n    idata.posterior[\"sigma_e\"].values\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 180002
    },
    {
      "source": "idata",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 200002
    },
    {
      "source": "class LinearRegressionWrapper(az.SamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data[\"x\"]\n        ydata = self.idata_orig.observed_data[\"y\"]\n        mask = np.isin(np.arange(len(xdata)), idx)\n        data__i = {\"x\": xdata[~mask], \"y\": ydata[~mask], \"N\": len(ydata[~mask])}\n        data_ex = [ary[mask] for ary in (xdata, ydata)]\n        return data__i, data_ex\n    \n    def sample(self, modified_observed_data):\n        #Cloned from PyStan2SamplingWrapper.\n        fit = self.model.sampling(data=modified_observed_data, **self.sample_kwargs)\n        return fit\n\n    def get_inference_data(self, fit):\n        # Cloned from PyStan2SamplingWrapper.\n        idata = az.from_pystan(posterior=fit, **self.idata_kwargs)\n        return idata\n",
      "names": [
        {
          "import_components": [
            "arviz",
            "SamplingWrapper"
          ],
          "code_str": "az.SamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.base.SamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "arange"
          ],
          "code_str": "np.arange",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.arange"
        },
        {
          "import_components": [
            "numpy",
            "isin"
          ],
          "code_str": "np.isin",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.isin"
        },
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 17,
          "end_lineno": 17,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 230002
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 250002
    },
    {
      "source": "pystan_wrapper = LinearRegressionWrapper(\n    sm, \n    log_lik_fun=calculate_log_lik, \n    posterior_vars=(\"b0\", \"b1\", \"sigma_e\"),\n    idata_orig=idata, \n    sample_kwargs=sample_kwargs, \n    idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 270002
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 290002
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 300002
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pystan2_refitting_xr_lik",
        "ref_id": "refitting-pystan-2-x-models-with-arviz-and-xarray",
        "headings": [
          "Refitting PyStan (2.x) models with ArviZ (and xarray)"
        ]
      },
      "doc_lineno": 310002
    }
  ],
  "user_guide/pystan_refitting": [
    {
      "source": "import arviz as az\nimport stan\nimport numpy as np\nimport matplotlib.pyplot as plt",
      "names": [
        {
          "import_components": [
            "numpy"
          ],
          "code_str": "numpy",
          "lineno": 3,
          "end_lineno": 3,
          "context": "import_target",
          "resolved_location": "numpy"
        },
        {
          "import_components": [
            "matplotlib",
            "pyplot"
          ],
          "code_str": "matplotlib.pyplot",
          "lineno": 4,
          "end_lineno": 4,
          "context": "import_target",
          "resolved_location": "matplotlib.pyplot"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 30002
    },
    {
      "source": "# enable PyStan on Jupyter IDE\nimport nest_asyncio\nnest_asyncio.apply()",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 40002
    },
    {
      "source": "np.random.seed(26)\n\nxdata = np.linspace(0, 50, 100)\nb0, b1, sigma = -2, 1, 3\nydata = np.random.normal(loc=b1 * xdata + b0, scale=sigma)",
      "names": [
        {
          "import_components": [
            "numpy",
            "random",
            "seed"
          ],
          "code_str": "np.random.seed",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.random.seed"
        },
        {
          "import_components": [
            "numpy",
            "linspace"
          ],
          "code_str": "np.linspace",
          "lineno": 3,
          "end_lineno": 3,
          "context": "none",
          "resolved_location": "numpy.linspace"
        },
        {
          "import_components": [
            "numpy",
            "random",
            "normal"
          ],
          "code_str": "np.random.normal",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.random.normal"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 60002
    },
    {
      "source": "plt.plot(xdata, ydata)",
      "names": [
        {
          "import_components": [
            "matplotlib",
            "pyplot",
            "plot"
          ],
          "code_str": "plt.plot",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "matplotlib.pyplot.plot"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 70002
    },
    {
      "source": "refit_lr_code = \"\"\"\ndata {\n  // Define data for fitting\n  int<lower=0> N;\n  vector[N] x;\n  vector[N] y;\n  // Define excluded data. It will not be used when fitting.\n  int<lower=0> N_ex;\n  vector[N_ex] x_ex;\n  vector[N_ex] y_ex;\n}\n\nparameters {\n  real b0;\n  real b1;\n  real<lower=0> sigma_e;\n}\n\nmodel {\n  b0 ~ normal(0, 10);\n  b1 ~ normal(0, 10);\n  sigma_e ~ normal(0, 10);\n  for (i in 1:N) {\n    y[i] ~ normal(b0 + b1 * x[i], sigma_e);  // use only data for fitting\n  }\n  \n}\n\ngenerated quantities {\n    vector[N] log_lik;\n    vector[N_ex] log_lik_ex;\n    vector[N] y_hat;\n    \n    for (i in 1:N) {\n        // calculate log likelihood and posterior predictive, there are \n        // no restrictions on adding more generated quantities\n        log_lik[i] = normal_lpdf(y[i] | b0 + b1 * x[i], sigma_e);\n        y_hat[i] = normal_rng(b0 + b1 * x[i], sigma_e);\n    }\n    for (j in 1:N_ex) {\n        // calculate the log likelihood of the excluded data given data_for_fitting\n        log_lik_ex[j] = normal_lpdf(y_ex[j] | b0 + b1 * x_ex[j], sigma_e);\n    }\n}\n\"\"\"",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 90002
    },
    {
      "source": "data_dict = {\n    \"N\": len(ydata),\n    \"y\": ydata,\n    \"x\": xdata,\n    # No excluded data in initial fit\n    \"N_ex\": 0,\n    \"x_ex\": [],\n    \"y_ex\": [],\n}\nsm = stan.build(program_code=refit_lr_code, data=data_dict)\nsample_kwargs = {\"num_samples\": 1000, \"num_chains\": 4}\nfit = sm.sample(**sample_kwargs)",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 100002
    },
    {
      "source": "dims = {\"y\": [\"time\"], \"x\": [\"time\"], \"log_likelihood\": [\"time\"], \"y_hat\": [\"time\"]}\nidata_kwargs = {\n    \"posterior_predictive\": [\"y_hat\"],\n    \"observed_data\": \"y\",\n    \"constant_data\": \"x\",\n    \"log_likelihood\": [\"log_lik\", \"log_lik_ex\"],\n    \"dims\": dims,\n}\nidata = az.from_pystan(posterior=fit, posterior_model=sm, **idata_kwargs)",
      "names": [
        {
          "import_components": [
            "arviz",
            "from_pystan"
          ],
          "code_str": "az.from_pystan",
          "lineno": 9,
          "end_lineno": 9,
          "context": "none",
          "resolved_location": "arviz.from_pystan"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 120002
    },
    {
      "source": "class LinearRegressionWrapper(az.PyStanSamplingWrapper):\n    def sel_observations(self, idx):\n        xdata = self.idata_orig.constant_data.x.values\n        ydata = self.idata_orig.observed_data.y.values\n        mask = np.full_like(xdata, True, dtype=bool)\n        mask[idx] = False\n        N_obs = len(mask)\n        N_ex = np.sum(~mask)\n        observations = {\n            \"N\": int(N_obs - N_ex),\n            \"x\": xdata[mask],\n            \"y\": ydata[mask],\n            \"N_ex\": int(N_ex),\n            \"x_ex\": xdata[~mask],\n            \"y_ex\": ydata[~mask],\n        }\n        return observations, \"log_lik_ex\"",
      "names": [
        {
          "import_components": [
            "arviz",
            "PyStanSamplingWrapper"
          ],
          "code_str": "az.PyStanSamplingWrapper",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.wrappers.wrap_stan.PyStanSamplingWrapper"
        },
        {
          "import_components": [
            "numpy",
            "full_like"
          ],
          "code_str": "np.full_like",
          "lineno": 5,
          "end_lineno": 5,
          "context": "none",
          "resolved_location": "numpy.full_like"
        },
        {
          "import_components": [
            "numpy",
            "sum"
          ],
          "code_str": "np.sum",
          "lineno": 8,
          "end_lineno": 8,
          "context": "none",
          "resolved_location": "numpy.sum"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 140002
    },
    {
      "source": "loo_orig = az.loo(idata, pointwise=True)\nloo_orig",
      "names": [
        {
          "import_components": [
            "arviz",
            "loo"
          ],
          "code_str": "az.loo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.loo"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 150002
    },
    {
      "source": "loo_orig.pareto_k[[13, 42, 56, 73]] = np.array([0.8, 1.2, 2.6, 0.9])",
      "names": [
        {
          "import_components": [
            "numpy",
            "array"
          ],
          "code_str": "np.array",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "numpy.array"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 170002
    },
    {
      "source": "pystan_wrapper = LinearRegressionWrapper(\n    refit_lr_code, idata_orig=idata, sample_kwargs=sample_kwargs, idata_kwargs=idata_kwargs\n)",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 190002
    },
    {
      "source": "loo_relooed = az.reloo(pystan_wrapper, loo_orig=loo_orig)",
      "names": [
        {
          "import_components": [
            "arviz",
            "reloo"
          ],
          "code_str": "az.reloo",
          "lineno": 1,
          "end_lineno": 1,
          "context": "none",
          "resolved_location": "arviz.reloo"
        }
      ],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 210002
    },
    {
      "source": "loo_relooed",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 220002
    },
    {
      "source": "loo_orig",
      "names": [],
      "example": {
        "document": "user_guide/pystan_refitting",
        "ref_id": "refitting-pystan-3-0-models-with-arviz",
        "headings": [
          "Refitting PyStan (3.0+) models with ArviZ"
        ]
      },
      "doc_lineno": 230002
    }
  ],
  "user_guide/sampling_wrappers": []
}